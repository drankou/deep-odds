// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.8.0
// source: pkg/betsapi/types/types.proto

package types

import (
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type InPlayEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//sport id
	SportId string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"` //required
	//league id
	LeagueId string `protobuf:"bytes,2,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"` //optional
}

func (x *InPlayEventsRequest) Reset() {
	*x = InPlayEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InPlayEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InPlayEventsRequest) ProtoMessage() {}

func (x *InPlayEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InPlayEventsRequest.ProtoReflect.Descriptor instead.
func (*InPlayEventsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{0}
}

func (x *InPlayEventsRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *InPlayEventsRequest) GetLeagueId() string {
	if x != nil {
		return x.LeagueId
	}
	return ""
}

type EventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events   []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	NextPage int32    `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
}

func (x *EventsResponse) Reset() {
	*x = EventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsResponse) ProtoMessage() {}

func (x *EventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsResponse.ProtoReflect.Descriptor instead.
func (*EventsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{1}
}

func (x *EventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventsResponse) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

type UpcomingEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//sport id
	SportId string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"` //required
	//league id
	LeagueId string `protobuf:"bytes,2,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"` //optional
	//team id
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"` //optional
	//country code
	CountryCode string `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` //optional
	//day in format YYYYMMDD
	Day string `protobuf:"bytes,5,opt,name=day,proto3" json:"day,omitempty"` //optional
	//page number (max 100)
	Page string `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"` //optional
}

func (x *UpcomingEventsRequest) Reset() {
	*x = UpcomingEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpcomingEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpcomingEventsRequest) ProtoMessage() {}

func (x *UpcomingEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpcomingEventsRequest.ProtoReflect.Descriptor instead.
func (*UpcomingEventsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{2}
}

func (x *UpcomingEventsRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *UpcomingEventsRequest) GetLeagueId() string {
	if x != nil {
		return x.LeagueId
	}
	return ""
}

func (x *UpcomingEventsRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *UpcomingEventsRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *UpcomingEventsRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *UpcomingEventsRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

type StartingEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId         string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	MinuteThreshold int64  `protobuf:"varint,2,opt,name=minute_threshold,json=minuteThreshold,proto3" json:"minute_threshold,omitempty"`
}

func (x *StartingEventsRequest) Reset() {
	*x = StartingEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartingEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartingEventsRequest) ProtoMessage() {}

func (x *StartingEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartingEventsRequest.ProtoReflect.Descriptor instead.
func (*StartingEventsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{3}
}

func (x *StartingEventsRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *StartingEventsRequest) GetMinuteThreshold() int64 {
	if x != nil {
		return x.MinuteThreshold
	}
	return 0
}

type EndedEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//sport id
	SportId string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"` //required
	//league id
	LeagueId string `protobuf:"bytes,2,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"` //optional
	//team id
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"` //optional
	//country code
	CountryCode string `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"` //optional
	//day in format YYYYMMDD
	Day string `protobuf:"bytes,5,opt,name=day,proto3" json:"day,omitempty"` //optional
	//page number (max 100)
	Page string `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"` //optional
}

func (x *EndedEventsRequest) Reset() {
	*x = EndedEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndedEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndedEventsRequest) ProtoMessage() {}

func (x *EndedEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndedEventsRequest.ProtoReflect.Descriptor instead.
func (*EndedEventsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{4}
}

func (x *EndedEventsRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *EndedEventsRequest) GetLeagueId() string {
	if x != nil {
		return x.LeagueId
	}
	return ""
}

func (x *EndedEventsRequest) GetTeamId() string {
	if x != nil {
		return x.TeamId
	}
	return ""
}

func (x *EndedEventsRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *EndedEventsRequest) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

func (x *EndedEventsRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

type EventViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//event id
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` //required
}

func (x *EventViewRequest) Reset() {
	*x = EventViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventViewRequest) ProtoMessage() {}

func (x *EventViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventViewRequest.ProtoReflect.Descriptor instead.
func (*EventViewRequest) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{5}
}

func (x *EventViewRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type EventOddsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//event id
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` //required
	//odds source, name of available bookmakers
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"` //optional
	//add_time will be >= $since_time in results. Faster to get only updates
	SinceTime int64 `protobuf:"varint,3,opt,name=since_time,json=sinceTime,proto3" json:"since_time,omitempty"` //optional
	//if you only need one (or few) market to save time/bandwidth, pass the related string like &odds_market=1 or &odds_market=2,3 etc.
	OddsMarket string `protobuf:"bytes,4,opt,name=odds_market,json=oddsMarket,proto3" json:"odds_market,omitempty"` //optional
}

func (x *EventOddsRequest) Reset() {
	*x = EventOddsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventOddsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventOddsRequest) ProtoMessage() {}

func (x *EventOddsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventOddsRequest.ProtoReflect.Descriptor instead.
func (*EventOddsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{6}
}

func (x *EventOddsRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventOddsRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EventOddsRequest) GetSinceTime() int64 {
	if x != nil {
		return x.SinceTime
	}
	return 0
}

func (x *EventOddsRequest) GetOddsMarket() string {
	if x != nil {
		return x.OddsMarket
	}
	return ""
}

type EventStatsTrendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (x *EventStatsTrendRequest) Reset() {
	*x = EventStatsTrendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStatsTrendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatsTrendRequest) ProtoMessage() {}

func (x *EventStatsTrendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatsTrendRequest.ProtoReflect.Descriptor instead.
func (*EventStatsTrendRequest) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{7}
}

func (x *EventStatsTrendRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

type LeaguesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId     string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Page        string `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *LeaguesRequest) Reset() {
	*x = LeaguesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaguesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaguesRequest) ProtoMessage() {}

func (x *LeaguesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaguesRequest.ProtoReflect.Descriptor instead.
func (*LeaguesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{8}
}

func (x *LeaguesRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *LeaguesRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *LeaguesRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

type LeaguesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leagues  []*League `protobuf:"bytes,1,rep,name=leagues,proto3" json:"leagues,omitempty"`
	NextPage int32     `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
}

func (x *LeaguesResponse) Reset() {
	*x = LeaguesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaguesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaguesResponse) ProtoMessage() {}

func (x *LeaguesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaguesResponse.ProtoReflect.Descriptor instead.
func (*LeaguesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{9}
}

func (x *LeaguesResponse) GetLeagues() []*League {
	if x != nil {
		return x.Leagues
	}
	return nil
}

func (x *LeaguesResponse) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

type TeamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SportId string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	Page    string `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *TeamsRequest) Reset() {
	*x = TeamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsRequest) ProtoMessage() {}

func (x *TeamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsRequest.ProtoReflect.Descriptor instead.
func (*TeamsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{10}
}

func (x *TeamsRequest) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *TeamsRequest) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

type TeamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Teams    []*Team `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	NextPage int32   `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
}

func (x *TeamsResponse) Reset() {
	*x = TeamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamsResponse) ProtoMessage() {}

func (x *TeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamsResponse.ProtoReflect.Descriptor instead.
func (*TeamsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{11}
}

func (x *TeamsResponse) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *TeamsResponse) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

// ------------- Event ---------------- //
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time       int64             `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	SportId    string            `protobuf:"bytes,3,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	TimeStatus string            `protobuf:"bytes,4,opt,name=time_status,json=timeStatus,proto3" json:"time_status,omitempty"`
	Score      string            `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	HomeTeam   *Team             `protobuf:"bytes,6,opt,name=home_team,json=homeTeam,proto3" json:"home_team,omitempty"`
	AwayTeam   *Team             `protobuf:"bytes,7,opt,name=away_team,json=awayTeam,proto3" json:"away_team,omitempty"`
	League     *League           `protobuf:"bytes,8,opt,name=league,proto3" json:"league,omitempty"`
	Timer      *Timer            `protobuf:"bytes,9,opt,name=timer,proto3" json:"timer,omitempty"`
	ExtraInfo  *ExtraInfo        `protobuf:"bytes,10,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
	Events     []*EventViewEvent `protobuf:"bytes,11,rep,name=events,proto3" json:"events,omitempty"`
	HasLineup  int32             `protobuf:"varint,12,opt,name=has_lineup,json=hasLineup,proto3" json:"has_lineup,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{12}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Event) GetSportId() string {
	if x != nil {
		return x.SportId
	}
	return ""
}

func (x *Event) GetTimeStatus() string {
	if x != nil {
		return x.TimeStatus
	}
	return ""
}

func (x *Event) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Event) GetHomeTeam() *Team {
	if x != nil {
		return x.HomeTeam
	}
	return nil
}

func (x *Event) GetAwayTeam() *Team {
	if x != nil {
		return x.AwayTeam
	}
	return nil
}

func (x *Event) GetLeague() *League {
	if x != nil {
		return x.League
	}
	return nil
}

func (x *Event) GetTimer() *Timer {
	if x != nil {
		return x.Timer
	}
	return nil
}

func (x *Event) GetExtraInfo() *ExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

func (x *Event) GetEvents() []*EventViewEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Event) GetHasLineup() int32 {
	if x != nil {
		return x.HasLineup
	}
	return 0
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CountryCode string `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{13}
}

func (x *Team) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Team) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Team) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type League struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CountryCode string `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *League) Reset() {
	*x = League{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *League) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*League) ProtoMessage() {}

func (x *League) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use League.ProtoReflect.Descriptor instead.
func (*League) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{14}
}

func (x *League) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *League) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *League) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type Timer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active    int64 `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Minutes   int64 `protobuf:"varint,2,opt,name=minutes,proto3" json:"minutes,omitempty"`
	Seconds   int64 `protobuf:"varint,3,opt,name=seconds,proto3" json:"seconds,omitempty"`
	AddedTime int64 `protobuf:"varint,4,opt,name=added_time,json=addedTime,proto3" json:"added_time,omitempty"`
}

func (x *Timer) Reset() {
	*x = Timer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{15}
}

func (x *Timer) GetActive() int64 {
	if x != nil {
		return x.Active
	}
	return 0
}

func (x *Timer) GetMinutes() int64 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *Timer) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Timer) GetAddedTime() int64 {
	if x != nil {
		return x.AddedTime
	}
	return 0
}

type ExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomeManager  *Manager     `protobuf:"bytes,1,opt,name=home_manager,json=homeManager,proto3" json:"home_manager,omitempty"`
	AwayManager  *Manager     `protobuf:"bytes,2,opt,name=away_manager,json=awayManager,proto3" json:"away_manager,omitempty"`
	Referee      *Referee     `protobuf:"bytes,3,opt,name=referee,proto3" json:"referee,omitempty"`
	StadiumData  *StadiumData `protobuf:"bytes,4,opt,name=stadium_data,json=stadiumData,proto3" json:"stadium_data,omitempty"`
	Length       int64        `protobuf:"varint,5,opt,name=length,proto3" json:"length,omitempty"`
	Pitch        string       `protobuf:"bytes,6,opt,name=pitch,proto3" json:"pitch,omitempty"`
	Weather      string       `protobuf:"bytes,7,opt,name=weather,proto3" json:"weather,omitempty"`
	Stadium      string       `protobuf:"bytes,8,opt,name=stadium,proto3" json:"stadium,omitempty"`
	HomePosition int64        `protobuf:"varint,9,opt,name=home_position,json=homePosition,proto3" json:"home_position,omitempty"`
	AwayPosition int64        `protobuf:"varint,10,opt,name=away_position,json=awayPosition,proto3" json:"away_position,omitempty"`
	Round        string       `protobuf:"bytes,11,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *ExtraInfo) Reset() {
	*x = ExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraInfo) ProtoMessage() {}

func (x *ExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraInfo.ProtoReflect.Descriptor instead.
func (*ExtraInfo) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{16}
}

func (x *ExtraInfo) GetHomeManager() *Manager {
	if x != nil {
		return x.HomeManager
	}
	return nil
}

func (x *ExtraInfo) GetAwayManager() *Manager {
	if x != nil {
		return x.AwayManager
	}
	return nil
}

func (x *ExtraInfo) GetReferee() *Referee {
	if x != nil {
		return x.Referee
	}
	return nil
}

func (x *ExtraInfo) GetStadiumData() *StadiumData {
	if x != nil {
		return x.StadiumData
	}
	return nil
}

func (x *ExtraInfo) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *ExtraInfo) GetPitch() string {
	if x != nil {
		return x.Pitch
	}
	return ""
}

func (x *ExtraInfo) GetWeather() string {
	if x != nil {
		return x.Weather
	}
	return ""
}

func (x *ExtraInfo) GetStadium() string {
	if x != nil {
		return x.Stadium
	}
	return ""
}

func (x *ExtraInfo) GetHomePosition() int64 {
	if x != nil {
		return x.HomePosition
	}
	return 0
}

func (x *ExtraInfo) GetAwayPosition() int64 {
	if x != nil {
		return x.AwayPosition
	}
	return 0
}

func (x *ExtraInfo) GetRound() string {
	if x != nil {
		return x.Round
	}
	return ""
}

type Manager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *Manager) Reset() {
	*x = Manager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manager) ProtoMessage() {}

func (x *Manager) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manager.ProtoReflect.Descriptor instead.
func (*Manager) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{17}
}

func (x *Manager) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Manager) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type Referee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CountryCode string `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
}

func (x *Referee) Reset() {
	*x = Referee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Referee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Referee) ProtoMessage() {}

func (x *Referee) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Referee.ProtoReflect.Descriptor instead.
func (*Referee) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{18}
}

func (x *Referee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Referee) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

type StadiumData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	City         string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	Country      string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Capacity     int64  `protobuf:"varint,5,opt,name=capacity,proto3" json:"capacity,omitempty"`
	GoogleCoords string `protobuf:"bytes,6,opt,name=google_coords,json=googleCoords,proto3" json:"google_coords,omitempty"`
}

func (x *StadiumData) Reset() {
	*x = StadiumData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StadiumData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StadiumData) ProtoMessage() {}

func (x *StadiumData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StadiumData.ProtoReflect.Descriptor instead.
func (*StadiumData) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{19}
}

func (x *StadiumData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StadiumData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StadiumData) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *StadiumData) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *StadiumData) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *StadiumData) GetGoogleCoords() string {
	if x != nil {
		return x.GoogleCoords
	}
	return ""
}

type EventViewEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *EventViewEvent) Reset() {
	*x = EventViewEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventViewEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventViewEvent) ProtoMessage() {}

func (x *EventViewEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventViewEvent.ProtoReflect.Descriptor instead.
func (*EventViewEvent) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{20}
}

func (x *EventViewEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EventViewEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type EventHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event id
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"` //required
	// number of last matches (default 10, allowing 1 to 20)
	Qty string `protobuf:"bytes,2,opt,name=qty,proto3" json:"qty,omitempty"` //optional
}

func (x *EventHistoryRequest) Reset() {
	*x = EventHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHistoryRequest) ProtoMessage() {}

func (x *EventHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHistoryRequest.ProtoReflect.Descriptor instead.
func (*EventHistoryRequest) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{21}
}

func (x *EventHistoryRequest) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventHistoryRequest) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

type EventHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	H2H  []*Event `protobuf:"bytes,1,rep,name=h2h,proto3" json:"h2h,omitempty"`
	Home []*Event `protobuf:"bytes,2,rep,name=home,proto3" json:"home,omitempty"`
	Away []*Event `protobuf:"bytes,3,rep,name=away,proto3" json:"away,omitempty"`
}

func (x *EventHistory) Reset() {
	*x = EventHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventHistory) ProtoMessage() {}

func (x *EventHistory) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventHistory.ProtoReflect.Descriptor instead.
func (*EventHistory) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{22}
}

func (x *EventHistory) GetH2H() []*Event {
	if x != nil {
		return x.H2H
	}
	return nil
}

func (x *EventHistory) GetHome() []*Event {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *EventHistory) GetAway() []*Event {
	if x != nil {
		return x.Away
	}
	return nil
}

// ----------- Odds ------------- //
type Odds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullTime               []*Result              `protobuf:"bytes,1,rep,name=full_time,json=fullTime,proto3" json:"full_time,omitempty"`
	AsianHandicap          []*AsianHandicapResult `protobuf:"bytes,2,rep,name=asian_handicap,json=asianHandicap,proto3" json:"asian_handicap,omitempty"`
	Total                  []*AsianHandicapTotal  `protobuf:"bytes,3,rep,name=total,proto3" json:"total,omitempty"`
	AsianCorners           []*AsianHandicapTotal  `protobuf:"bytes,4,rep,name=asian_corners,json=asianCorners,proto3" json:"asian_corners,omitempty"`
	FirstHalfAsianHandicap []*AsianHandicapResult `protobuf:"bytes,5,rep,name=first_half_asian_handicap,json=firstHalfAsianHandicap,proto3" json:"first_half_asian_handicap,omitempty"`
	FirstHalfTotal         []*AsianHandicapTotal  `protobuf:"bytes,6,rep,name=first_half_total,json=firstHalfTotal,proto3" json:"first_half_total,omitempty"`
	FirstHalfAsianCorners  []*AsianHandicapTotal  `protobuf:"bytes,7,rep,name=first_half_asian_corners,json=firstHalfAsianCorners,proto3" json:"first_half_asian_corners,omitempty"`
	FirstHalf              []*Result              `protobuf:"bytes,8,rep,name=first_half,json=firstHalf,proto3" json:"first_half,omitempty"`
}

func (x *Odds) Reset() {
	*x = Odds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Odds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Odds) ProtoMessage() {}

func (x *Odds) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Odds.ProtoReflect.Descriptor instead.
func (*Odds) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{23}
}

func (x *Odds) GetFullTime() []*Result {
	if x != nil {
		return x.FullTime
	}
	return nil
}

func (x *Odds) GetAsianHandicap() []*AsianHandicapResult {
	if x != nil {
		return x.AsianHandicap
	}
	return nil
}

func (x *Odds) GetTotal() []*AsianHandicapTotal {
	if x != nil {
		return x.Total
	}
	return nil
}

func (x *Odds) GetAsianCorners() []*AsianHandicapTotal {
	if x != nil {
		return x.AsianCorners
	}
	return nil
}

func (x *Odds) GetFirstHalfAsianHandicap() []*AsianHandicapResult {
	if x != nil {
		return x.FirstHalfAsianHandicap
	}
	return nil
}

func (x *Odds) GetFirstHalfTotal() []*AsianHandicapTotal {
	if x != nil {
		return x.FirstHalfTotal
	}
	return nil
}

func (x *Odds) GetFirstHalfAsianCorners() []*AsianHandicapTotal {
	if x != nil {
		return x.FirstHalfAsianCorners
	}
	return nil
}

func (x *Odds) GetFirstHalf() []*Result {
	if x != nil {
		return x.FirstHalf
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HomeOdds float64 `protobuf:"fixed64,2,opt,name=home_odds,json=homeOdds,proto3" json:"home_odds,omitempty"`
	DrawOdds float64 `protobuf:"fixed64,3,opt,name=draw_odds,json=drawOdds,proto3" json:"draw_odds,omitempty"`
	AwayOdds float64 `protobuf:"fixed64,4,opt,name=away_odds,json=awayOdds,proto3" json:"away_odds,omitempty"`
	Score    string  `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	Minute   int64   `protobuf:"varint,6,opt,name=minute,proto3" json:"minute,omitempty"`
	AddTime  int64   `protobuf:"varint,7,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{24}
}

func (x *Result) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Result) GetHomeOdds() float64 {
	if x != nil {
		return x.HomeOdds
	}
	return 0
}

func (x *Result) GetDrawOdds() float64 {
	if x != nil {
		return x.DrawOdds
	}
	return 0
}

func (x *Result) GetAwayOdds() float64 {
	if x != nil {
		return x.AwayOdds
	}
	return 0
}

func (x *Result) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Result) GetMinute() int64 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *Result) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

type AsianHandicapResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HomeOdds float64 `protobuf:"fixed64,2,opt,name=home_odds,json=homeOdds,proto3" json:"home_odds,omitempty"`
	Handicap string  `protobuf:"bytes,3,opt,name=handicap,proto3" json:"handicap,omitempty"`
	AwayOdds float64 `protobuf:"fixed64,4,opt,name=away_odds,json=awayOdds,proto3" json:"away_odds,omitempty"`
	Score    string  `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	Minute   int64   `protobuf:"varint,6,opt,name=minute,proto3" json:"minute,omitempty"`
	AddTime  int64   `protobuf:"varint,7,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
}

func (x *AsianHandicapResult) Reset() {
	*x = AsianHandicapResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsianHandicapResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsianHandicapResult) ProtoMessage() {}

func (x *AsianHandicapResult) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsianHandicapResult.ProtoReflect.Descriptor instead.
func (*AsianHandicapResult) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{25}
}

func (x *AsianHandicapResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AsianHandicapResult) GetHomeOdds() float64 {
	if x != nil {
		return x.HomeOdds
	}
	return 0
}

func (x *AsianHandicapResult) GetHandicap() string {
	if x != nil {
		return x.Handicap
	}
	return ""
}

func (x *AsianHandicapResult) GetAwayOdds() float64 {
	if x != nil {
		return x.AwayOdds
	}
	return 0
}

func (x *AsianHandicapResult) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *AsianHandicapResult) GetMinute() int64 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *AsianHandicapResult) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

type AsianHandicapTotal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OverOdds  float64 `protobuf:"fixed64,2,opt,name=over_odds,json=overOdds,proto3" json:"over_odds,omitempty"`
	Handicap  string  `protobuf:"bytes,3,opt,name=handicap,proto3" json:"handicap,omitempty"`
	UnderOdds float64 `protobuf:"fixed64,4,opt,name=under_odds,json=underOdds,proto3" json:"under_odds,omitempty"`
	Score     string  `protobuf:"bytes,5,opt,name=score,proto3" json:"score,omitempty"`
	Minute    int64   `protobuf:"varint,6,opt,name=minute,proto3" json:"minute,omitempty"`
	AddTime   int64   `protobuf:"varint,7,opt,name=add_time,json=addTime,proto3" json:"add_time,omitempty"`
}

func (x *AsianHandicapTotal) Reset() {
	*x = AsianHandicapTotal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsianHandicapTotal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsianHandicapTotal) ProtoMessage() {}

func (x *AsianHandicapTotal) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsianHandicapTotal.ProtoReflect.Descriptor instead.
func (*AsianHandicapTotal) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{26}
}

func (x *AsianHandicapTotal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AsianHandicapTotal) GetOverOdds() float64 {
	if x != nil {
		return x.OverOdds
	}
	return 0
}

func (x *AsianHandicapTotal) GetHandicap() string {
	if x != nil {
		return x.Handicap
	}
	return ""
}

func (x *AsianHandicapTotal) GetUnderOdds() float64 {
	if x != nil {
		return x.UnderOdds
	}
	return 0
}

func (x *AsianHandicapTotal) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *AsianHandicapTotal) GetMinute() int64 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *AsianHandicapTotal) GetAddTime() int64 {
	if x != nil {
		return x.AddTime
	}
	return 0
}

// ------------------ Stats trend ----------------- //
type StatsTrend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attacks          *StatsTrendValue `protobuf:"bytes,1,opt,name=attacks,proto3" json:"attacks,omitempty"`
	DangerousAttacks *StatsTrendValue `protobuf:"bytes,2,opt,name=dangerous_attacks,json=dangerousAttacks,proto3" json:"dangerous_attacks,omitempty"`
	Possession       *StatsTrendValue `protobuf:"bytes,3,opt,name=possession,proto3" json:"possession,omitempty"`
	OffTarget        *StatsTrendValue `protobuf:"bytes,4,opt,name=off_target,json=offTarget,proto3" json:"off_target,omitempty"`
	OnTarget         *StatsTrendValue `protobuf:"bytes,5,opt,name=on_target,json=onTarget,proto3" json:"on_target,omitempty"`
	Corners          *StatsTrendValue `protobuf:"bytes,6,opt,name=corners,proto3" json:"corners,omitempty"`
	Goals            *StatsTrendValue `protobuf:"bytes,7,opt,name=goals,proto3" json:"goals,omitempty"`
	YellowCards      *StatsTrendValue `protobuf:"bytes,8,opt,name=yellow_cards,json=yellowCards,proto3" json:"yellow_cards,omitempty"`
	RedCards         *StatsTrendValue `protobuf:"bytes,9,opt,name=red_cards,json=redCards,proto3" json:"red_cards,omitempty"`
	Substitutions    *StatsTrendValue `protobuf:"bytes,10,opt,name=substitutions,proto3" json:"substitutions,omitempty"`
}

func (x *StatsTrend) Reset() {
	*x = StatsTrend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsTrend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsTrend) ProtoMessage() {}

func (x *StatsTrend) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsTrend.ProtoReflect.Descriptor instead.
func (*StatsTrend) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{27}
}

func (x *StatsTrend) GetAttacks() *StatsTrendValue {
	if x != nil {
		return x.Attacks
	}
	return nil
}

func (x *StatsTrend) GetDangerousAttacks() *StatsTrendValue {
	if x != nil {
		return x.DangerousAttacks
	}
	return nil
}

func (x *StatsTrend) GetPossession() *StatsTrendValue {
	if x != nil {
		return x.Possession
	}
	return nil
}

func (x *StatsTrend) GetOffTarget() *StatsTrendValue {
	if x != nil {
		return x.OffTarget
	}
	return nil
}

func (x *StatsTrend) GetOnTarget() *StatsTrendValue {
	if x != nil {
		return x.OnTarget
	}
	return nil
}

func (x *StatsTrend) GetCorners() *StatsTrendValue {
	if x != nil {
		return x.Corners
	}
	return nil
}

func (x *StatsTrend) GetGoals() *StatsTrendValue {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *StatsTrend) GetYellowCards() *StatsTrendValue {
	if x != nil {
		return x.YellowCards
	}
	return nil
}

func (x *StatsTrend) GetRedCards() *StatsTrendValue {
	if x != nil {
		return x.RedCards
	}
	return nil
}

func (x *StatsTrend) GetSubstitutions() *StatsTrendValue {
	if x != nil {
		return x.Substitutions
	}
	return nil
}

type StatsTrendValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Home []*StatsTrendTick `protobuf:"bytes,1,rep,name=home,proto3" json:"home,omitempty"`
	Away []*StatsTrendTick `protobuf:"bytes,2,rep,name=away,proto3" json:"away,omitempty"`
}

func (x *StatsTrendValue) Reset() {
	*x = StatsTrendValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsTrendValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsTrendValue) ProtoMessage() {}

func (x *StatsTrendValue) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsTrendValue.ProtoReflect.Descriptor instead.
func (*StatsTrendValue) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{28}
}

func (x *StatsTrendValue) GetHome() []*StatsTrendTick {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *StatsTrendValue) GetAway() []*StatsTrendTick {
	if x != nil {
		return x.Away
	}
	return nil
}

type StatsTrendTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *StatsTrendTick) Reset() {
	*x = StatsTrendTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsTrendTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsTrendTick) ProtoMessage() {}

func (x *StatsTrendTick) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsTrendTick.ProtoReflect.Descriptor instead.
func (*StatsTrendTick) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{29}
}

func (x *StatsTrendTick) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StatsTrendTick) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FootballEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event      *Event        `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	History    *EventHistory `protobuf:"bytes,2,opt,name=history,proto3" json:"history,omitempty"`
	Odds       *Odds         `protobuf:"bytes,3,opt,name=odds,proto3" json:"odds,omitempty"`
	StatsTrend *StatsTrend   `protobuf:"bytes,4,opt,name=stats_trend,json=statsTrend,proto3" json:"stats_trend,omitempty"`
}

func (x *FootballEvent) Reset() {
	*x = FootballEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_betsapi_types_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootballEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootballEvent) ProtoMessage() {}

func (x *FootballEvent) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_betsapi_types_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootballEvent.ProtoReflect.Descriptor instead.
func (*FootballEvent) Descriptor() ([]byte, []int) {
	return file_pkg_betsapi_types_types_proto_rawDescGZIP(), []int{30}
}

func (x *FootballEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *FootballEvent) GetHistory() *EventHistory {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *FootballEvent) GetOdds() *Odds {
	if x != nil {
		return x.Odds
	}
	return nil
}

func (x *FootballEvent) GetStatsTrend() *StatsTrend {
	if x != nil {
		return x.StatsTrend
	}
	return nil
}

var File_pkg_betsapi_types_types_proto protoreflect.FileDescriptor

var file_pkg_betsapi_types_types_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6b, 0x67, 0x2f, 0x62, 0x65, 0x74, 0x73, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x34, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x13, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4f, 0x64, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x64, 0x64, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x33,
	0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x54, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x49, 0x0a, 0x0d, 0x54, 0x65, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61, 0x6d,
	0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x22, 0xea, 0x06, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xea, 0xde, 0x1f, 0x02,
	0x69, 0x64, 0xf2, 0xde, 0x1f, 0x13, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x28, 0xea, 0xde, 0x1f,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2, 0xde, 0x1f, 0x15,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xea,
	0xde, 0x1f, 0x08, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0xf2, 0xde, 0x1f, 0x19, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xea, 0xde, 0x1f, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xf2, 0xde, 0x1f, 0x1c, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0xea, 0xde, 0x1f, 0x02, 0x73, 0x73, 0xf2, 0xde, 0x1f, 0x16, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x68,
	0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x26, 0xea, 0xde, 0x1f, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0xf2,
	0xde, 0x1f, 0x1a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x68,
	0x6f, 0x6d, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f,
	0x74, 0x65, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x54, 0x65, 0x61,
	0x6d, 0x42, 0x26, 0xea, 0xde, 0x1f, 0x04, 0x61, 0x77, 0x61, 0x79, 0xf2, 0xde, 0x1f, 0x1a, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x54,
	0x65, 0x61, 0x6d, 0x12, 0x46, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x42, 0x25, 0xea, 0xde,
	0x1f, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0xf2, 0xde, 0x1f, 0x17, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72, 0xf2, 0xde, 0x1f,
	0x08, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x05, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x12, 0x5d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x32, 0xea, 0xde, 0x1f, 0x0f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x58, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x42, 0x2f, 0xea, 0xde, 0x1f, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x0a, 0x68, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x37, 0xea,
	0xde, 0x1f, 0x14, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x68, 0x61, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x22, 0xb8, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xea, 0xde, 0x1f, 0x02, 0x69, 0x64, 0xf2, 0xde,
	0x1f, 0x13, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xea, 0xde, 0x1f, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xf2, 0xde, 0x1f, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xea, 0xde, 0x1f, 0x02, 0x63, 0x63, 0xf2, 0xde,
	0x1f, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xba, 0x01, 0x0a,
	0x06, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0xea, 0xde, 0x1f, 0x02, 0x69, 0x64, 0xf2, 0xde, 0x1f, 0x13, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xea, 0xde, 0x1f, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xf2, 0xde,
	0x1f, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0xea, 0xde, 0x1f, 0x02, 0x63, 0x63, 0xf2, 0xde, 0x1f, 0x1d, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x05, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x19, 0xea, 0xde, 0x1f, 0x09, 0x74, 0x74, 0x2c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0xf2, 0xde, 0x1f, 0x08, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x22, 0xea, 0xde, 0x1f, 0x02, 0x74, 0x6d, 0xf2,
	0xde, 0x1f, 0x18, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x22, 0xea, 0xde, 0x1f, 0x02, 0x74, 0x73, 0xf2, 0xde, 0x1f,
	0x18, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x25, 0xea, 0xde, 0x1f, 0x02, 0x74, 0x61, 0xf2, 0xde,
	0x1f, 0x1b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe3, 0x05, 0x0a, 0x09, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x21, 0xf2, 0xde, 0x1f, 0x1d, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x21, 0xf2, 0xde, 0x1f, 0x1d, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x79, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x65, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x12, 0x52, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x64,
	0x69, 0x75, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x53, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x21, 0xf2, 0xde,
	0x1f, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2c, 0xea, 0xde,
	0x1f, 0x0d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2,
	0xde, 0x1f, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0xf2, 0xde, 0x1f, 0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x69, 0x74,
	0x63, 0x68, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x70,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x07, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xf2,
	0xde, 0x1f, 0x18, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x0d, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0xf2, 0xde, 0x1f,
	0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0c, 0x68, 0x6f, 0x6d, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x79,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x77, 0x61, 0x79, 0x5f,
	0x70, 0x6f, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0c,
	0x61, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xf2, 0xde, 0x1f,
	0x16, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x8c,
	0x01, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xea, 0xde, 0x1f, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xf2, 0xde, 0x1f, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xea, 0xde, 0x1f, 0x02, 0x63, 0x63, 0xf2,
	0xde, 0x1f, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01,
	0x0a, 0x07, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xea, 0xde, 0x1f, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0xf2, 0xde, 0x1f, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xea, 0xde, 0x1f, 0x02, 0x63, 0x63, 0xf2, 0xde,
	0x1f, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa7, 0x03, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xea, 0xde, 0x1f, 0x02, 0x69, 0x64,
	0xf2, 0xde, 0x1f, 0x13, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x69, 0x64, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xea, 0xde, 0x1f, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0xf2, 0xde, 0x1f, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0xea, 0xde, 0x1f, 0x04, 0x63, 0x69, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x15, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x69, 0x74, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xea, 0xde, 0x1f, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0xf2, 0xde, 0x1f, 0x18, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x08,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x3a,
	0xea, 0xde, 0x1f, 0x19, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f,
	0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x0d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xea, 0xde, 0x1f,
	0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xf2, 0xde, 0x1f, 0x1d, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56,
	0x69, 0x65, 0x77, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x02, 0x69, 0x64, 0xf2, 0xde, 0x1f, 0x08,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xea, 0xde, 0x1f, 0x04,
	0x74, 0x65, 0x78, 0x74, 0xf2, 0xde, 0x1f, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x65,
	0x78, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x71, 0x74, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x03, 0x68, 0x32, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x15, 0xea,
	0xde, 0x1f, 0x03, 0x68, 0x32, 0x68, 0xf2, 0xde, 0x1f, 0x0a, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x68, 0x32, 0x68, 0x22, 0x52, 0x03, 0x68, 0x32, 0x68, 0x12, 0x33, 0x0a, 0x04, 0x68, 0x6f, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42,
	0x17, 0xea, 0xde, 0x1f, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0xf2, 0xde, 0x1f, 0x0b, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x68, 0x6f, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x61, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x42, 0x17, 0xea, 0xde, 0x1f, 0x04, 0x61, 0x77, 0x61, 0x79, 0xf2, 0xde,
	0x1f, 0x0b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x77, 0x61, 0x79, 0x22, 0x52, 0x04, 0x61,
	0x77, 0x61, 0x79, 0x22, 0xe8, 0x05, 0x0a, 0x04, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x1b, 0xea, 0xde, 0x1f, 0x03, 0x31, 0x5f,
	0x31, 0xf2, 0xde, 0x1f, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x5d, 0x0a, 0x0e, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x73, 0x69, 0x61, 0x6e, 0x48,
	0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x20, 0xea,
	0xde, 0x1f, 0x03, 0x31, 0x5f, 0x32, 0xf2, 0xde, 0x1f, 0x15, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22,
	0x61, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x22, 0x52,
	0x0d, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x12, 0x42,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x41, 0x73, 0x69, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x17, 0xea, 0xde, 0x1f, 0x03, 0x31, 0x5f, 0x33, 0xf2, 0xde, 0x1f, 0x0c, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x59, 0x0a, 0x0d, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x73, 0x69, 0x61,
	0x6e, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x1f,
	0xea, 0xde, 0x1f, 0x03, 0x31, 0x5f, 0x34, 0xf2, 0xde, 0x1f, 0x14, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x52,
	0x0c, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x7c, 0x0a,
	0x19, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x61, 0x73, 0x69, 0x61,
	0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x41, 0x73, 0x69, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x2b, 0xea, 0xde, 0x1f, 0x03, 0x31, 0x5f, 0x35, 0xf2,
	0xde, 0x1f, 0x20, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x68,
	0x61, 0x6c, 0x66, 0x5f, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x70, 0x22, 0x52, 0x16, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x41, 0x73,
	0x69, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x12, 0x61, 0x0a, 0x10, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x73, 0x69, 0x61, 0x6e, 0x48, 0x61, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x22, 0xea, 0xde, 0x1f, 0x03,
	0x31, 0x5f, 0x36, 0xf2, 0xde, 0x1f, 0x17, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x52, 0x0e,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x78,
	0x0a, 0x18, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x61, 0x73, 0x69,
	0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x41, 0x73, 0x69, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x2a, 0xea, 0xde, 0x1f, 0x03, 0x31, 0x5f, 0x37, 0xf2, 0xde,
	0x1f, 0x1f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x68, 0x61,
	0x6c, 0x66, 0x5f, 0x61, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73,
	0x22, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x41, 0x73, 0x69, 0x61,
	0x6e, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x5f, 0x68, 0x61, 0x6c, 0x66, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x1c, 0xea, 0xde, 0x1f, 0x03, 0x31, 0x5f, 0x38, 0xf2, 0xde,
	0x1f, 0x11, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x68, 0x61,
	0x6c, 0x66, 0x22, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x48, 0x61, 0x6c, 0x66, 0x22, 0xaa,
	0x03, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x02, 0x69, 0x64, 0xf2, 0xde, 0x1f,
	0x08, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x2d, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x26, 0xea, 0xde, 0x1f, 0x0e, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6f, 0x64, 0x2c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0xf2, 0xde, 0x1f, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x6f,
	0x6d, 0x65, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x22, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x4f, 0x64,
	0x64, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x26, 0xea, 0xde, 0x1f, 0x0e, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x6f, 0x64, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2, 0xde, 0x1f, 0x10, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x22, 0x52, 0x08, 0x64,
	0x72, 0x61, 0x77, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x77, 0x61, 0x79, 0x5f,
	0x6f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x26, 0xea, 0xde, 0x1f, 0x0e,
	0x61, 0x77, 0x61, 0x79, 0x5f, 0x6f, 0x64, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2, 0xde,
	0x1f, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6f, 0x64, 0x64,
	0x73, 0x22, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f,
	0x02, 0x73, 0x73, 0xf2, 0xde, 0x1f, 0x0c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x24, 0xea, 0xde, 0x1f, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2,
	0xde, 0x1f, 0x0d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22,
	0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x26, 0xea, 0xde, 0x1f, 0x0f,
	0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2,
	0xde, 0x1f, 0x0f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xaf, 0x03, 0x0a, 0x13,
	0x41, 0x73, 0x69, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0xea, 0xde, 0x1f, 0x02, 0x69, 0x64, 0xf2, 0xde, 0x1f, 0x08, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x2d, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f,
	0x6f, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x26, 0xea, 0xde, 0x1f, 0x0e,
	0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6f, 0x64, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2, 0xde,
	0x1f, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6f, 0x64, 0x64,
	0x73, 0x22, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x08,
	0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xea, 0xde, 0x1f, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0xf2, 0xde, 0x1f, 0x0f,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x22, 0x52,
	0x08, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x77, 0x61,
	0x79, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x26, 0xea, 0xde,
	0x1f, 0x0e, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6f, 0x64, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0xf2, 0xde, 0x1f, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x77, 0x61, 0x79, 0x5f, 0x6f,
	0x64, 0x64, 0x73, 0x22, 0x52, 0x08, 0x61, 0x77, 0x61, 0x79, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x2c,
	0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea,
	0xde, 0x1f, 0x02, 0x73, 0x73, 0xf2, 0xde, 0x1f, 0x0c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x24, 0xea, 0xde,
	0x1f, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0xf2, 0xde, 0x1f, 0x0d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x22, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x64,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x26, 0xea, 0xde,
	0x1f, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0xf2, 0xde, 0x1f, 0x0f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x64, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb1, 0x03,
	0x0a, 0x12, 0x41, 0x73, 0x69, 0x61, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0xea, 0xde, 0x1f, 0x02, 0x69, 0x64, 0xf2, 0xde, 0x1f, 0x08, 0x62, 0x73, 0x6f, 0x6e,
	0x3a, 0x22, 0x2d, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x26, 0xea, 0xde, 0x1f,
	0x0e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x64, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2,
	0xde, 0x1f, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x6f, 0x64,
	0x64, 0x73, 0x22, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x3b, 0x0a,
	0x08, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0xea, 0xde, 0x1f, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0xf2, 0xde, 0x1f,
	0x0f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x22,
	0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x70, 0x12, 0x46, 0x0a, 0x0a, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x27,
	0xea, 0xde, 0x1f, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x64, 0x2c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0xf2, 0xde, 0x1f, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x77, 0x61,
	0x79, 0x5f, 0x6f, 0x64, 0x64, 0x73, 0x22, 0x52, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x64,
	0x64, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x02, 0x73, 0x73, 0xf2, 0xde, 0x1f, 0x0c, 0x62, 0x73, 0x6f,
	0x6e, 0x3a, 0x22, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x24, 0xea, 0xde, 0x1f, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x2c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2, 0xde, 0x1f, 0x0d, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x26, 0xea, 0xde, 0x1f, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2, 0xde, 0x1f, 0x0f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61,
	0x64, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xe6, 0x06, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x12, 0x49, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x1d, 0xea, 0xde, 0x1f, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0xf2, 0xde, 0x1f, 0x0e, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b,
	0x73, 0x22, 0x52, 0x07, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x70, 0x0a, 0x11, 0x64,
	0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x31, 0xea, 0xde, 0x1f, 0x11, 0x64, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0xf2,
	0xde, 0x1f, 0x18, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x64, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x6f,
	0x75, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x52, 0x10, 0x64, 0x61, 0x6e,
	0x67, 0x65, 0x72, 0x6f, 0x75, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x55, 0x0a,
	0x0a, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x23, 0xea, 0xde, 0x1f, 0x0a, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0xf2, 0xde, 0x1f, 0x11, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x70, 0x6f, 0x73,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x23, 0xea, 0xde, 0x1f, 0x0a,
	0x6f, 0x66, 0x66, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0xf2, 0xde, 0x1f, 0x11, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x52,
	0x09, 0x6f, 0x66, 0x66, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x09, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x21, 0xea, 0xde, 0x1f, 0x09, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0xf2, 0xde,
	0x1f, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x22, 0x52, 0x08, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x07,
	0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x1d, 0xea, 0xde, 0x1f, 0x07, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0xf2, 0xde, 0x1f, 0x0e,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x52, 0x07,
	0x63, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x19, 0xea, 0xde, 0x1f, 0x05, 0x67, 0x6f,
	0x61, 0x6c, 0x73, 0xf2, 0xde, 0x1f, 0x0c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x67, 0x6f, 0x61,
	0x6c, 0x73, 0x22, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x5b, 0x0a, 0x0c, 0x79, 0x65,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x26, 0xea, 0xde, 0x1f, 0x0b, 0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x61,
	0x72, 0x64, 0x73, 0xf2, 0xde, 0x1f, 0x13, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x79, 0x65, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x52, 0x0b, 0x79, 0x65, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x1f, 0xea, 0xde,
	0x1f, 0x08, 0x72, 0x65, 0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0xf2, 0xde, 0x1f, 0x0f, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x72, 0x65, 0x64, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x52, 0x08, 0x72,
	0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x61, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x29, 0xea, 0xde, 0x1f, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0xf2, 0xde, 0x1f, 0x14, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0d, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0f, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c,
	0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x42, 0x17, 0xea,
	0xde, 0x1f, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0xf2, 0xde, 0x1f, 0x0b, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x68, 0x6f, 0x6d, 0x65, 0x22, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x04,
	0x61, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x42, 0x17, 0xea, 0xde, 0x1f,
	0x04, 0x61, 0x77, 0x61, 0x79, 0xf2, 0xde, 0x1f, 0x0b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x61,
	0x77, 0x61, 0x79, 0x22, 0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x22, 0x7e, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x22, 0xea, 0xde, 0x1f, 0x0f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x2c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xf2,
	0xde, 0x1f, 0x0b, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x1e, 0xea, 0xde, 0x1f, 0x0a, 0x76, 0x61, 0x6c, 0x2c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0xf2, 0xde, 0x1f, 0x0c, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x46,
	0x6f, 0x6f, 0x74, 0x62, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x07, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x4f, 0x64, 0x64, 0x73, 0x52, 0x04, 0x6f, 0x64, 0x64, 0x73, 0x12, 0x2c,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x32, 0xb0, 0x04, 0x0a,
	0x07, 0x42, 0x65, 0x74, 0x73, 0x61, 0x70, 0x69, 0x12, 0x3a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x2e, 0x49, 0x6e,
	0x50, 0x6c, 0x61, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x70, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x55, 0x70, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x13, 0x2e, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2b,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x11,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x06, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4f, 0x64, 0x64, 0x73, 0x12, 0x11, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x64, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05, 0x2e, 0x4f, 0x64, 0x64, 0x73, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x17, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x22, 0x00, 0x12,
	0x31, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x12, 0x0f, 0x2e,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x2b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x0d,
	0x2e, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e,
	0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_pkg_betsapi_types_types_proto_rawDescOnce sync.Once
	file_pkg_betsapi_types_types_proto_rawDescData = file_pkg_betsapi_types_types_proto_rawDesc
)

func file_pkg_betsapi_types_types_proto_rawDescGZIP() []byte {
	file_pkg_betsapi_types_types_proto_rawDescOnce.Do(func() {
		file_pkg_betsapi_types_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_betsapi_types_types_proto_rawDescData)
	})
	return file_pkg_betsapi_types_types_proto_rawDescData
}

var file_pkg_betsapi_types_types_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_pkg_betsapi_types_types_proto_goTypes = []interface{}{
	(*InPlayEventsRequest)(nil),    // 0: InPlayEventsRequest
	(*EventsResponse)(nil),         // 1: EventsResponse
	(*UpcomingEventsRequest)(nil),  // 2: UpcomingEventsRequest
	(*StartingEventsRequest)(nil),  // 3: StartingEventsRequest
	(*EndedEventsRequest)(nil),     // 4: EndedEventsRequest
	(*EventViewRequest)(nil),       // 5: EventViewRequest
	(*EventOddsRequest)(nil),       // 6: EventOddsRequest
	(*EventStatsTrendRequest)(nil), // 7: EventStatsTrendRequest
	(*LeaguesRequest)(nil),         // 8: LeaguesRequest
	(*LeaguesResponse)(nil),        // 9: LeaguesResponse
	(*TeamsRequest)(nil),           // 10: TeamsRequest
	(*TeamsResponse)(nil),          // 11: TeamsResponse
	(*Event)(nil),                  // 12: Event
	(*Team)(nil),                   // 13: Team
	(*League)(nil),                 // 14: League
	(*Timer)(nil),                  // 15: Timer
	(*ExtraInfo)(nil),              // 16: ExtraInfo
	(*Manager)(nil),                // 17: Manager
	(*Referee)(nil),                // 18: Referee
	(*StadiumData)(nil),            // 19: StadiumData
	(*EventViewEvent)(nil),         // 20: EventViewEvent
	(*EventHistoryRequest)(nil),    // 21: EventHistoryRequest
	(*EventHistory)(nil),           // 22: EventHistory
	(*Odds)(nil),                   // 23: Odds
	(*Result)(nil),                 // 24: Result
	(*AsianHandicapResult)(nil),    // 25: AsianHandicapResult
	(*AsianHandicapTotal)(nil),     // 26: AsianHandicapTotal
	(*StatsTrend)(nil),             // 27: StatsTrend
	(*StatsTrendValue)(nil),        // 28: StatsTrendValue
	(*StatsTrendTick)(nil),         // 29: StatsTrendTick
	(*FootballEvent)(nil),          // 30: FootballEvent
}
var file_pkg_betsapi_types_types_proto_depIdxs = []int32{
	12, // 0: EventsResponse.events:type_name -> Event
	14, // 1: LeaguesResponse.leagues:type_name -> League
	13, // 2: TeamsResponse.teams:type_name -> Team
	13, // 3: Event.home_team:type_name -> Team
	13, // 4: Event.away_team:type_name -> Team
	14, // 5: Event.league:type_name -> League
	15, // 6: Event.timer:type_name -> Timer
	16, // 7: Event.extra_info:type_name -> ExtraInfo
	20, // 8: Event.events:type_name -> EventViewEvent
	17, // 9: ExtraInfo.home_manager:type_name -> Manager
	17, // 10: ExtraInfo.away_manager:type_name -> Manager
	18, // 11: ExtraInfo.referee:type_name -> Referee
	19, // 12: ExtraInfo.stadium_data:type_name -> StadiumData
	12, // 13: EventHistory.h2h:type_name -> Event
	12, // 14: EventHistory.home:type_name -> Event
	12, // 15: EventHistory.away:type_name -> Event
	24, // 16: Odds.full_time:type_name -> Result
	25, // 17: Odds.asian_handicap:type_name -> AsianHandicapResult
	26, // 18: Odds.total:type_name -> AsianHandicapTotal
	26, // 19: Odds.asian_corners:type_name -> AsianHandicapTotal
	25, // 20: Odds.first_half_asian_handicap:type_name -> AsianHandicapResult
	26, // 21: Odds.first_half_total:type_name -> AsianHandicapTotal
	26, // 22: Odds.first_half_asian_corners:type_name -> AsianHandicapTotal
	24, // 23: Odds.first_half:type_name -> Result
	28, // 24: StatsTrend.attacks:type_name -> StatsTrendValue
	28, // 25: StatsTrend.dangerous_attacks:type_name -> StatsTrendValue
	28, // 26: StatsTrend.possession:type_name -> StatsTrendValue
	28, // 27: StatsTrend.off_target:type_name -> StatsTrendValue
	28, // 28: StatsTrend.on_target:type_name -> StatsTrendValue
	28, // 29: StatsTrend.corners:type_name -> StatsTrendValue
	28, // 30: StatsTrend.goals:type_name -> StatsTrendValue
	28, // 31: StatsTrend.yellow_cards:type_name -> StatsTrendValue
	28, // 32: StatsTrend.red_cards:type_name -> StatsTrendValue
	28, // 33: StatsTrend.substitutions:type_name -> StatsTrendValue
	29, // 34: StatsTrendValue.home:type_name -> StatsTrendTick
	29, // 35: StatsTrendValue.away:type_name -> StatsTrendTick
	12, // 36: FootballEvent.event:type_name -> Event
	22, // 37: FootballEvent.history:type_name -> EventHistory
	23, // 38: FootballEvent.odds:type_name -> Odds
	27, // 39: FootballEvent.stats_trend:type_name -> StatsTrend
	0,  // 40: Betsapi.GetInPlayEvents:input_type -> InPlayEventsRequest
	2,  // 41: Betsapi.GetUpcomingEvents:input_type -> UpcomingEventsRequest
	3,  // 42: Betsapi.GetStartingEvents:input_type -> StartingEventsRequest
	4,  // 43: Betsapi.GetEndedEvents:input_type -> EndedEventsRequest
	5,  // 44: Betsapi.GetEventView:input_type -> EventViewRequest
	21, // 45: Betsapi.GetEventHistory:input_type -> EventHistoryRequest
	6,  // 46: Betsapi.GetEventOdds:input_type -> EventOddsRequest
	7,  // 47: Betsapi.GetEventStatsTrend:input_type -> EventStatsTrendRequest
	8,  // 48: Betsapi.GetLeagues:input_type -> LeaguesRequest
	10, // 49: Betsapi.GetTeams:input_type -> TeamsRequest
	1,  // 50: Betsapi.GetInPlayEvents:output_type -> EventsResponse
	1,  // 51: Betsapi.GetUpcomingEvents:output_type -> EventsResponse
	1,  // 52: Betsapi.GetStartingEvents:output_type -> EventsResponse
	1,  // 53: Betsapi.GetEndedEvents:output_type -> EventsResponse
	12, // 54: Betsapi.GetEventView:output_type -> Event
	22, // 55: Betsapi.GetEventHistory:output_type -> EventHistory
	23, // 56: Betsapi.GetEventOdds:output_type -> Odds
	27, // 57: Betsapi.GetEventStatsTrend:output_type -> StatsTrend
	9,  // 58: Betsapi.GetLeagues:output_type -> LeaguesResponse
	11, // 59: Betsapi.GetTeams:output_type -> TeamsResponse
	50, // [50:60] is the sub-list for method output_type
	40, // [40:50] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_pkg_betsapi_types_types_proto_init() }
func file_pkg_betsapi_types_types_proto_init() {
	if File_pkg_betsapi_types_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_betsapi_types_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InPlayEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpcomingEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartingEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndedEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventOddsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStatsTrendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaguesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaguesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*League); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Manager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Referee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StadiumData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventViewEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Odds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsianHandicapResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsianHandicapTotal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsTrend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsTrendValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsTrendTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_betsapi_types_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootballEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_betsapi_types_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_betsapi_types_types_proto_goTypes,
		DependencyIndexes: file_pkg_betsapi_types_types_proto_depIdxs,
		MessageInfos:      file_pkg_betsapi_types_types_proto_msgTypes,
	}.Build()
	File_pkg_betsapi_types_types_proto = out.File
	file_pkg_betsapi_types_types_proto_rawDesc = nil
	file_pkg_betsapi_types_types_proto_goTypes = nil
	file_pkg_betsapi_types_types_proto_depIdxs = nil
}

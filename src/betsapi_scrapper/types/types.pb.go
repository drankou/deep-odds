// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/betsapi_scrapper/types/types.proto

package types

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InPlayEventsRequest struct {
	//sport id
	SportId string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	//league id
	LeagueId             string   `protobuf:"bytes,2,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InPlayEventsRequest) Reset()         { *m = InPlayEventsRequest{} }
func (m *InPlayEventsRequest) String() string { return proto.CompactTextString(m) }
func (*InPlayEventsRequest) ProtoMessage()    {}
func (*InPlayEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{0}
}
func (m *InPlayEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InPlayEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InPlayEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InPlayEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InPlayEventsRequest.Merge(m, src)
}
func (m *InPlayEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *InPlayEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InPlayEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InPlayEventsRequest proto.InternalMessageInfo

func (m *InPlayEventsRequest) GetSportId() string {
	if m != nil {
		return m.SportId
	}
	return ""
}

func (m *InPlayEventsRequest) GetLeagueId() string {
	if m != nil {
		return m.LeagueId
	}
	return ""
}

type EventsResponse struct {
	Events               []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventsResponse) Reset()         { *m = EventsResponse{} }
func (m *EventsResponse) String() string { return proto.CompactTextString(m) }
func (*EventsResponse) ProtoMessage()    {}
func (*EventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{1}
}
func (m *EventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsResponse.Merge(m, src)
}
func (m *EventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *EventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventsResponse proto.InternalMessageInfo

func (m *EventsResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type UpcomingEventsRequest struct {
	//sport id
	SportId string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	//league id
	LeagueId string `protobuf:"bytes,2,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	//team id
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	//country code
	CountryCode string `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	//day in format YYYYMMDD
	Day string `protobuf:"bytes,5,opt,name=day,proto3" json:"day,omitempty"`
	//page number (max 100)
	Page                 string   `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpcomingEventsRequest) Reset()         { *m = UpcomingEventsRequest{} }
func (m *UpcomingEventsRequest) String() string { return proto.CompactTextString(m) }
func (*UpcomingEventsRequest) ProtoMessage()    {}
func (*UpcomingEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{2}
}
func (m *UpcomingEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpcomingEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpcomingEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpcomingEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpcomingEventsRequest.Merge(m, src)
}
func (m *UpcomingEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpcomingEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpcomingEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpcomingEventsRequest proto.InternalMessageInfo

func (m *UpcomingEventsRequest) GetSportId() string {
	if m != nil {
		return m.SportId
	}
	return ""
}

func (m *UpcomingEventsRequest) GetLeagueId() string {
	if m != nil {
		return m.LeagueId
	}
	return ""
}

func (m *UpcomingEventsRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *UpcomingEventsRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *UpcomingEventsRequest) GetDay() string {
	if m != nil {
		return m.Day
	}
	return ""
}

func (m *UpcomingEventsRequest) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

type StartingEventsRequest struct {
	SportId              string   `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	MinuteThreshold      int64    `protobuf:"varint,2,opt,name=minute_threshold,json=minuteThreshold,proto3" json:"minute_threshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartingEventsRequest) Reset()         { *m = StartingEventsRequest{} }
func (m *StartingEventsRequest) String() string { return proto.CompactTextString(m) }
func (*StartingEventsRequest) ProtoMessage()    {}
func (*StartingEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{3}
}
func (m *StartingEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartingEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartingEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StartingEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartingEventsRequest.Merge(m, src)
}
func (m *StartingEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *StartingEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartingEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartingEventsRequest proto.InternalMessageInfo

func (m *StartingEventsRequest) GetSportId() string {
	if m != nil {
		return m.SportId
	}
	return ""
}

func (m *StartingEventsRequest) GetMinuteThreshold() int64 {
	if m != nil {
		return m.MinuteThreshold
	}
	return 0
}

type EndedEventsRequest struct {
	//sport id
	SportId string `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	//league id
	LeagueId string `protobuf:"bytes,2,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	//team id
	TeamId string `protobuf:"bytes,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	//country code
	CountryCode string `protobuf:"bytes,4,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	//day in format YYYYMMDD
	Day string `protobuf:"bytes,5,opt,name=day,proto3" json:"day,omitempty"`
	//page number (max 100)
	Page                 string   `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndedEventsRequest) Reset()         { *m = EndedEventsRequest{} }
func (m *EndedEventsRequest) String() string { return proto.CompactTextString(m) }
func (*EndedEventsRequest) ProtoMessage()    {}
func (*EndedEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{4}
}
func (m *EndedEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndedEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndedEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndedEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndedEventsRequest.Merge(m, src)
}
func (m *EndedEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *EndedEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndedEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndedEventsRequest proto.InternalMessageInfo

func (m *EndedEventsRequest) GetSportId() string {
	if m != nil {
		return m.SportId
	}
	return ""
}

func (m *EndedEventsRequest) GetLeagueId() string {
	if m != nil {
		return m.LeagueId
	}
	return ""
}

func (m *EndedEventsRequest) GetTeamId() string {
	if m != nil {
		return m.TeamId
	}
	return ""
}

func (m *EndedEventsRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *EndedEventsRequest) GetDay() string {
	if m != nil {
		return m.Day
	}
	return ""
}

func (m *EndedEventsRequest) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

type EventViewRequest struct {
	//event id
	EventId              string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventViewRequest) Reset()         { *m = EventViewRequest{} }
func (m *EventViewRequest) String() string { return proto.CompactTextString(m) }
func (*EventViewRequest) ProtoMessage()    {}
func (*EventViewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{5}
}
func (m *EventViewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventViewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventViewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventViewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventViewRequest.Merge(m, src)
}
func (m *EventViewRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventViewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventViewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventViewRequest proto.InternalMessageInfo

func (m *EventViewRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

type EventOddsRequest struct {
	//event id
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	//odds source, name of available bookmakers
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	//add_time will be >= $since_time in results. Faster to get only updates
	SinceTime int64 `protobuf:"varint,3,opt,name=since_time,json=sinceTime,proto3" json:"since_time,omitempty"`
	//if you only need one (or few) market to save time/bandwidth, pass the related string like &odds_market=1 or &odds_market=2,3 etc.
	OddsMarket           string   `protobuf:"bytes,4,opt,name=odds_market,json=oddsMarket,proto3" json:"odds_market,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventOddsRequest) Reset()         { *m = EventOddsRequest{} }
func (m *EventOddsRequest) String() string { return proto.CompactTextString(m) }
func (*EventOddsRequest) ProtoMessage()    {}
func (*EventOddsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{6}
}
func (m *EventOddsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOddsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOddsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOddsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOddsRequest.Merge(m, src)
}
func (m *EventOddsRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventOddsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOddsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventOddsRequest proto.InternalMessageInfo

func (m *EventOddsRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *EventOddsRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *EventOddsRequest) GetSinceTime() int64 {
	if m != nil {
		return m.SinceTime
	}
	return 0
}

func (m *EventOddsRequest) GetOddsMarket() string {
	if m != nil {
		return m.OddsMarket
	}
	return ""
}

type EventStatsTrendRequest struct {
	EventId              string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventStatsTrendRequest) Reset()         { *m = EventStatsTrendRequest{} }
func (m *EventStatsTrendRequest) String() string { return proto.CompactTextString(m) }
func (*EventStatsTrendRequest) ProtoMessage()    {}
func (*EventStatsTrendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{7}
}
func (m *EventStatsTrendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventStatsTrendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventStatsTrendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventStatsTrendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventStatsTrendRequest.Merge(m, src)
}
func (m *EventStatsTrendRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventStatsTrendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventStatsTrendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventStatsTrendRequest proto.InternalMessageInfo

func (m *EventStatsTrendRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

type LeaguesRequest struct {
	SportId              string   `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	CountryCode          string   `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	Page                 string   `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaguesRequest) Reset()         { *m = LeaguesRequest{} }
func (m *LeaguesRequest) String() string { return proto.CompactTextString(m) }
func (*LeaguesRequest) ProtoMessage()    {}
func (*LeaguesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{8}
}
func (m *LeaguesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaguesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaguesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaguesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaguesRequest.Merge(m, src)
}
func (m *LeaguesRequest) XXX_Size() int {
	return m.Size()
}
func (m *LeaguesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaguesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaguesRequest proto.InternalMessageInfo

func (m *LeaguesRequest) GetSportId() string {
	if m != nil {
		return m.SportId
	}
	return ""
}

func (m *LeaguesRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *LeaguesRequest) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

type LeaguesResponse struct {
	Leagues              []*League `protobuf:"bytes,1,rep,name=leagues,proto3" json:"leagues,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LeaguesResponse) Reset()         { *m = LeaguesResponse{} }
func (m *LeaguesResponse) String() string { return proto.CompactTextString(m) }
func (*LeaguesResponse) ProtoMessage()    {}
func (*LeaguesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{9}
}
func (m *LeaguesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaguesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaguesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaguesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaguesResponse.Merge(m, src)
}
func (m *LeaguesResponse) XXX_Size() int {
	return m.Size()
}
func (m *LeaguesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaguesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaguesResponse proto.InternalMessageInfo

func (m *LeaguesResponse) GetLeagues() []*League {
	if m != nil {
		return m.Leagues
	}
	return nil
}

type TeamsRequest struct {
	SportId              string   `protobuf:"bytes,1,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	Page                 string   `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamsRequest) Reset()         { *m = TeamsRequest{} }
func (m *TeamsRequest) String() string { return proto.CompactTextString(m) }
func (*TeamsRequest) ProtoMessage()    {}
func (*TeamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{10}
}
func (m *TeamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamsRequest.Merge(m, src)
}
func (m *TeamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeamsRequest proto.InternalMessageInfo

func (m *TeamsRequest) GetSportId() string {
	if m != nil {
		return m.SportId
	}
	return ""
}

func (m *TeamsRequest) GetPage() string {
	if m != nil {
		return m.Page
	}
	return ""
}

type TeamsResponse struct {
	Teams                []*Team  `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TeamsResponse) Reset()         { *m = TeamsResponse{} }
func (m *TeamsResponse) String() string { return proto.CompactTextString(m) }
func (*TeamsResponse) ProtoMessage()    {}
func (*TeamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{11}
}
func (m *TeamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamsResponse.Merge(m, src)
}
func (m *TeamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeamsResponse proto.InternalMessageInfo

func (m *TeamsResponse) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

// ------------- Event ---------------- //
type Event struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"id,omitempty"`
	Time                 int64             `protobuf:"varint,2,opt,name=time,proto3" json:"time,string" bson:"time,omitempty"`
	SportId              string            `protobuf:"bytes,3,opt,name=sport_id,json=sportId,proto3" json:"sport_id" bson:"sport_id,omitempty"`
	TimeStatus           string            `protobuf:"bytes,4,opt,name=time_status,json=timeStatus,proto3" json:"time_status" bson:"time_status,omitempty"`
	Score                string            `protobuf:"bytes,5,opt,name=score,proto3" json:"ss" bson:"score,omitempty"`
	HomeTeam             *Team             `protobuf:"bytes,6,opt,name=home_team,json=homeTeam,proto3" json:"home" bson:"home_team,omitempty"`
	AwayTeam             *Team             `protobuf:"bytes,7,opt,name=away_team,json=awayTeam,proto3" json:"away" bson:"away_team,omitempty"`
	League               *League           `protobuf:"bytes,8,opt,name=league,proto3" json:"league" bson:"league,omitempty"`
	Timer                *Timer            `protobuf:"bytes,9,opt,name=timer,proto3" json:"timer" bson:"-"`
	ExtraInfo            *ExtraInfo        `protobuf:"bytes,10,opt,name=extra_info,json=extraInfo,proto3" json:"extra,omitempty" bson:"extra_info,omitempty"`
	Events               []*EventViewEvent `protobuf:"bytes,11,rep,name=events,proto3" json:"events,omitempty" bson:"events,omitempty"`
	HasLineup            int32             `protobuf:"varint,12,opt,name=has_lineup,json=hasLineup,proto3" json:"has_lineup,omitempty" bson:"has_lineup,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{12}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Event) GetSportId() string {
	if m != nil {
		return m.SportId
	}
	return ""
}

func (m *Event) GetTimeStatus() string {
	if m != nil {
		return m.TimeStatus
	}
	return ""
}

func (m *Event) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *Event) GetHomeTeam() *Team {
	if m != nil {
		return m.HomeTeam
	}
	return nil
}

func (m *Event) GetAwayTeam() *Team {
	if m != nil {
		return m.AwayTeam
	}
	return nil
}

func (m *Event) GetLeague() *League {
	if m != nil {
		return m.League
	}
	return nil
}

func (m *Event) GetTimer() *Timer {
	if m != nil {
		return m.Timer
	}
	return nil
}

func (m *Event) GetExtraInfo() *ExtraInfo {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

func (m *Event) GetEvents() []*EventViewEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Event) GetHasLineup() int32 {
	if m != nil {
		return m.HasLineup
	}
	return 0
}

type Team struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name,omitempty"`
	CountryCode          string   `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"cc" bson:"country_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{13}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type League struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name,omitempty"`
	CountryCode          string   `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"cc" bson:"country_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *League) Reset()         { *m = League{} }
func (m *League) String() string { return proto.CompactTextString(m) }
func (*League) ProtoMessage()    {}
func (*League) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{14}
}
func (m *League) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *League) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_League.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *League) XXX_Merge(src proto.Message) {
	xxx_messageInfo_League.Merge(m, src)
}
func (m *League) XXX_Size() int {
	return m.Size()
}
func (m *League) XXX_DiscardUnknown() {
	xxx_messageInfo_League.DiscardUnknown(m)
}

var xxx_messageInfo_League proto.InternalMessageInfo

func (m *League) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *League) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *League) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type Timer struct {
	Active               int64    `protobuf:"varint,1,opt,name=active,proto3" json:"tt,string" bson:"-"`
	Minutes              int64    `protobuf:"varint,2,opt,name=minutes,proto3" json:"tm" bson:"minutes,omitempty"`
	Seconds              int64    `protobuf:"varint,3,opt,name=seconds,proto3" json:"ts" bson:"seconds,omitempty"`
	AddedTime            int64    `protobuf:"varint,4,opt,name=added_time,json=addedTime,proto3" json:"ta" bson:"added_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Timer) Reset()         { *m = Timer{} }
func (m *Timer) String() string { return proto.CompactTextString(m) }
func (*Timer) ProtoMessage()    {}
func (*Timer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{15}
}
func (m *Timer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timer.Merge(m, src)
}
func (m *Timer) XXX_Size() int {
	return m.Size()
}
func (m *Timer) XXX_DiscardUnknown() {
	xxx_messageInfo_Timer.DiscardUnknown(m)
}

var xxx_messageInfo_Timer proto.InternalMessageInfo

func (m *Timer) GetActive() int64 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *Timer) GetMinutes() int64 {
	if m != nil {
		return m.Minutes
	}
	return 0
}

func (m *Timer) GetSeconds() int64 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

func (m *Timer) GetAddedTime() int64 {
	if m != nil {
		return m.AddedTime
	}
	return 0
}

type ExtraInfo struct {
	HomeManager          *Manager     `protobuf:"bytes,1,opt,name=home_manager,json=homeManager,proto3" json:"home_manager,omitempty" bson:"home_manager,omitempty"`
	AwayManager          *Manager     `protobuf:"bytes,2,opt,name=away_manager,json=awayManager,proto3" json:"away_manager,omitempty" bson:"away_manager,omitempty"`
	Referee              *Referee     `protobuf:"bytes,3,opt,name=referee,proto3" json:"referee,omitempty" bson:"referee,omitempty"`
	StadiumData          *StadiumData `protobuf:"bytes,4,opt,name=stadium_data,json=stadiumData,proto3" json:"stadium_data,omitempty" bson:"stadium_data,omitempty"`
	Length               int64        `protobuf:"varint,5,opt,name=length,proto3" json:"length,string" bson:"length,omitempty"`
	Pitch                string       `protobuf:"bytes,6,opt,name=pitch,proto3" json:"pitch,omitempty" bson:"pitch,omitempty"`
	Weather              string       `protobuf:"bytes,7,opt,name=weather,proto3" json:"weather,omitempty" bson:"weather,omitempty"`
	Stadium              string       `protobuf:"bytes,8,opt,name=stadium,proto3" json:"stadium,omitempty" bson:"stadium,omitempty"`
	HomePosition         int64        `protobuf:"varint,9,opt,name=home_position,json=homePosition,proto3" json:"home_position,omitempty" bson:"home_pos,omitempty"`
	AwayPosition         int64        `protobuf:"varint,10,opt,name=away_position,json=awayPosition,proto3" json:"away_position,omitempty" bson:"away_pos,omitempty"`
	Round                string       `protobuf:"bytes,11,opt,name=round,proto3" json:"round,omitempty" bson:"round,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ExtraInfo) Reset()         { *m = ExtraInfo{} }
func (m *ExtraInfo) String() string { return proto.CompactTextString(m) }
func (*ExtraInfo) ProtoMessage()    {}
func (*ExtraInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{16}
}
func (m *ExtraInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtraInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtraInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtraInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraInfo.Merge(m, src)
}
func (m *ExtraInfo) XXX_Size() int {
	return m.Size()
}
func (m *ExtraInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraInfo proto.InternalMessageInfo

func (m *ExtraInfo) GetHomeManager() *Manager {
	if m != nil {
		return m.HomeManager
	}
	return nil
}

func (m *ExtraInfo) GetAwayManager() *Manager {
	if m != nil {
		return m.AwayManager
	}
	return nil
}

func (m *ExtraInfo) GetReferee() *Referee {
	if m != nil {
		return m.Referee
	}
	return nil
}

func (m *ExtraInfo) GetStadiumData() *StadiumData {
	if m != nil {
		return m.StadiumData
	}
	return nil
}

func (m *ExtraInfo) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ExtraInfo) GetPitch() string {
	if m != nil {
		return m.Pitch
	}
	return ""
}

func (m *ExtraInfo) GetWeather() string {
	if m != nil {
		return m.Weather
	}
	return ""
}

func (m *ExtraInfo) GetStadium() string {
	if m != nil {
		return m.Stadium
	}
	return ""
}

func (m *ExtraInfo) GetHomePosition() int64 {
	if m != nil {
		return m.HomePosition
	}
	return 0
}

func (m *ExtraInfo) GetAwayPosition() int64 {
	if m != nil {
		return m.AwayPosition
	}
	return 0
}

func (m *ExtraInfo) GetRound() string {
	if m != nil {
		return m.Round
	}
	return ""
}

type Manager struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" bson:"name,omitempty"`
	CountryCode          string   `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"cc" bson:"country_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Manager) Reset()         { *m = Manager{} }
func (m *Manager) String() string { return proto.CompactTextString(m) }
func (*Manager) ProtoMessage()    {}
func (*Manager) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{17}
}
func (m *Manager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Manager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Manager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Manager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Manager.Merge(m, src)
}
func (m *Manager) XXX_Size() int {
	return m.Size()
}
func (m *Manager) XXX_DiscardUnknown() {
	xxx_messageInfo_Manager.DiscardUnknown(m)
}

var xxx_messageInfo_Manager proto.InternalMessageInfo

func (m *Manager) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Manager) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type Referee struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name" bson:"name,omitempty"`
	CountryCode          string   `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"cc" bson:"country_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Referee) Reset()         { *m = Referee{} }
func (m *Referee) String() string { return proto.CompactTextString(m) }
func (*Referee) ProtoMessage()    {}
func (*Referee) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{18}
}
func (m *Referee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Referee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Referee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Referee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Referee.Merge(m, src)
}
func (m *Referee) XXX_Size() int {
	return m.Size()
}
func (m *Referee) XXX_DiscardUnknown() {
	xxx_messageInfo_Referee.DiscardUnknown(m)
}

var xxx_messageInfo_Referee proto.InternalMessageInfo

func (m *Referee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Referee) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type StadiumData struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" bson:"name,omitempty"`
	City                 string   `protobuf:"bytes,3,opt,name=city,proto3" json:"city" bson:"city,omitempty"`
	Country              string   `protobuf:"bytes,4,opt,name=country,proto3" json:"country" bson:"country,omitempty"`
	Capacity             int64    `protobuf:"varint,5,opt,name=capacity,proto3" json:"capacity,string,omitempty" bson:"capacity,omitempty"`
	GoogleCoords         string   `protobuf:"bytes,6,opt,name=google_coords,json=googleCoords,proto3" json:"googlecoords,omitempty" bson:"googlecoords,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StadiumData) Reset()         { *m = StadiumData{} }
func (m *StadiumData) String() string { return proto.CompactTextString(m) }
func (*StadiumData) ProtoMessage()    {}
func (*StadiumData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{19}
}
func (m *StadiumData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StadiumData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StadiumData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StadiumData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StadiumData.Merge(m, src)
}
func (m *StadiumData) XXX_Size() int {
	return m.Size()
}
func (m *StadiumData) XXX_DiscardUnknown() {
	xxx_messageInfo_StadiumData.DiscardUnknown(m)
}

var xxx_messageInfo_StadiumData proto.InternalMessageInfo

func (m *StadiumData) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StadiumData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StadiumData) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *StadiumData) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *StadiumData) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *StadiumData) GetGoogleCoords() string {
	if m != nil {
		return m.GoogleCoords
	}
	return ""
}

type EventViewEvent struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"-"`
	Text                 string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text" bson:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventViewEvent) Reset()         { *m = EventViewEvent{} }
func (m *EventViewEvent) String() string { return proto.CompactTextString(m) }
func (*EventViewEvent) ProtoMessage()    {}
func (*EventViewEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{20}
}
func (m *EventViewEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventViewEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventViewEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventViewEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventViewEvent.Merge(m, src)
}
func (m *EventViewEvent) XXX_Size() int {
	return m.Size()
}
func (m *EventViewEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EventViewEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EventViewEvent proto.InternalMessageInfo

func (m *EventViewEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventViewEvent) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type EventHistoryRequest struct {
	// event id
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// number of last matches (default 10, allowing 1 to 20)
	Qty                  string   `protobuf:"bytes,2,opt,name=qty,proto3" json:"qty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventHistoryRequest) Reset()         { *m = EventHistoryRequest{} }
func (m *EventHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*EventHistoryRequest) ProtoMessage()    {}
func (*EventHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{21}
}
func (m *EventHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventHistoryRequest.Merge(m, src)
}
func (m *EventHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventHistoryRequest proto.InternalMessageInfo

func (m *EventHistoryRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *EventHistoryRequest) GetQty() string {
	if m != nil {
		return m.Qty
	}
	return ""
}

type EventHistory struct {
	H2H                  []*Event `protobuf:"bytes,1,rep,name=h2h,proto3" json:"h2h" bson:"h2h"`
	Home                 []*Event `protobuf:"bytes,2,rep,name=home,proto3" json:"home" bson:"home"`
	Away                 []*Event `protobuf:"bytes,3,rep,name=away,proto3" json:"away" bson:"away"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventHistory) Reset()         { *m = EventHistory{} }
func (m *EventHistory) String() string { return proto.CompactTextString(m) }
func (*EventHistory) ProtoMessage()    {}
func (*EventHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{22}
}
func (m *EventHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventHistory.Merge(m, src)
}
func (m *EventHistory) XXX_Size() int {
	return m.Size()
}
func (m *EventHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_EventHistory.DiscardUnknown(m)
}

var xxx_messageInfo_EventHistory proto.InternalMessageInfo

func (m *EventHistory) GetH2H() []*Event {
	if m != nil {
		return m.H2H
	}
	return nil
}

func (m *EventHistory) GetHome() []*Event {
	if m != nil {
		return m.Home
	}
	return nil
}

func (m *EventHistory) GetAway() []*Event {
	if m != nil {
		return m.Away
	}
	return nil
}

// ----------- Odds ------------- //
type Odds struct {
	FullTime               []*Result              `protobuf:"bytes,1,rep,name=full_time,json=fullTime,proto3" json:"1_1" bson:"full_time"`
	AsianHandicap          []*AsianHandicapResult `protobuf:"bytes,2,rep,name=asian_handicap,json=asianHandicap,proto3" json:"1_2" bson:"asian_handicap"`
	Total                  []*AsianHandicapTotal  `protobuf:"bytes,3,rep,name=total,proto3" json:"1_3" bson:"total"`
	AsianCorners           []*AsianHandicapTotal  `protobuf:"bytes,4,rep,name=asian_corners,json=asianCorners,proto3" json:"1_4" bson:"asian_corners"`
	FirstHalfAsianHandicap []*AsianHandicapResult `protobuf:"bytes,5,rep,name=first_half_asian_handicap,json=firstHalfAsianHandicap,proto3" json:"1_5" bson:"first_half_asian_handicap"`
	FirstHalfTotal         []*AsianHandicapTotal  `protobuf:"bytes,6,rep,name=first_half_total,json=firstHalfTotal,proto3" json:"1_6" bson:"first_half_total"`
	FirstHalfAsianCorners  []*AsianHandicapTotal  `protobuf:"bytes,7,rep,name=first_half_asian_corners,json=firstHalfAsianCorners,proto3" json:"1_7" bson:"first_half_asian_corners"`
	FirstHalf              []*Result              `protobuf:"bytes,8,rep,name=first_half,json=firstHalf,proto3" json:"1_8" bson:"first_half"`
	XXX_NoUnkeyedLiteral   struct{}               `json:"-"`
	XXX_unrecognized       []byte                 `json:"-"`
	XXX_sizecache          int32                  `json:"-"`
}

func (m *Odds) Reset()         { *m = Odds{} }
func (m *Odds) String() string { return proto.CompactTextString(m) }
func (*Odds) ProtoMessage()    {}
func (*Odds) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{23}
}
func (m *Odds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Odds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Odds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Odds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Odds.Merge(m, src)
}
func (m *Odds) XXX_Size() int {
	return m.Size()
}
func (m *Odds) XXX_DiscardUnknown() {
	xxx_messageInfo_Odds.DiscardUnknown(m)
}

var xxx_messageInfo_Odds proto.InternalMessageInfo

func (m *Odds) GetFullTime() []*Result {
	if m != nil {
		return m.FullTime
	}
	return nil
}

func (m *Odds) GetAsianHandicap() []*AsianHandicapResult {
	if m != nil {
		return m.AsianHandicap
	}
	return nil
}

func (m *Odds) GetTotal() []*AsianHandicapTotal {
	if m != nil {
		return m.Total
	}
	return nil
}

func (m *Odds) GetAsianCorners() []*AsianHandicapTotal {
	if m != nil {
		return m.AsianCorners
	}
	return nil
}

func (m *Odds) GetFirstHalfAsianHandicap() []*AsianHandicapResult {
	if m != nil {
		return m.FirstHalfAsianHandicap
	}
	return nil
}

func (m *Odds) GetFirstHalfTotal() []*AsianHandicapTotal {
	if m != nil {
		return m.FirstHalfTotal
	}
	return nil
}

func (m *Odds) GetFirstHalfAsianCorners() []*AsianHandicapTotal {
	if m != nil {
		return m.FirstHalfAsianCorners
	}
	return nil
}

func (m *Odds) GetFirstHalf() []*Result {
	if m != nil {
		return m.FirstHalf
	}
	return nil
}

type Result struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"-"`
	HomeOdds             float64  `protobuf:"fixed64,2,opt,name=home_odds,json=homeOdds,proto3" json:"home_od,string" bson:"home_odds"`
	DrawOdds             float64  `protobuf:"fixed64,3,opt,name=draw_odds,json=drawOdds,proto3" json:"draw_od,string" bson:"draw_odds"`
	AwayOdds             float64  `protobuf:"fixed64,4,opt,name=away_odds,json=awayOdds,proto3" json:"away_od,string" bson:"away_odds"`
	Score                string   `protobuf:"bytes,5,opt,name=score,proto3" json:"ss" bson:"score"`
	Minute               int64    `protobuf:"varint,6,opt,name=minute,proto3" json:"time_str,string" bson:"minute"`
	AddTime              int64    `protobuf:"varint,7,opt,name=add_time,json=addTime,proto3" json:"add_time,string" bson:"add_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{24}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Result) GetHomeOdds() float64 {
	if m != nil {
		return m.HomeOdds
	}
	return 0
}

func (m *Result) GetDrawOdds() float64 {
	if m != nil {
		return m.DrawOdds
	}
	return 0
}

func (m *Result) GetAwayOdds() float64 {
	if m != nil {
		return m.AwayOdds
	}
	return 0
}

func (m *Result) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *Result) GetMinute() int64 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *Result) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

type AsianHandicapResult struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"-"`
	HomeOdds             float64  `protobuf:"fixed64,2,opt,name=home_odds,json=homeOdds,proto3" json:"home_od,string" bson:"home_odds"`
	Handicap             string   `protobuf:"bytes,3,opt,name=handicap,proto3" json:"handicap" bson:"handicap"`
	AwayOdds             float64  `protobuf:"fixed64,4,opt,name=away_odds,json=awayOdds,proto3" json:"away_od,string" bson:"away_odds"`
	Score                string   `protobuf:"bytes,5,opt,name=score,proto3" json:"ss" bson:"score"`
	Minute               int64    `protobuf:"varint,6,opt,name=minute,proto3" json:"time_str,string" bson:"minute"`
	AddTime              int64    `protobuf:"varint,7,opt,name=add_time,json=addTime,proto3" json:"add_time,string" bson:"add_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AsianHandicapResult) Reset()         { *m = AsianHandicapResult{} }
func (m *AsianHandicapResult) String() string { return proto.CompactTextString(m) }
func (*AsianHandicapResult) ProtoMessage()    {}
func (*AsianHandicapResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{25}
}
func (m *AsianHandicapResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AsianHandicapResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AsianHandicapResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AsianHandicapResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsianHandicapResult.Merge(m, src)
}
func (m *AsianHandicapResult) XXX_Size() int {
	return m.Size()
}
func (m *AsianHandicapResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AsianHandicapResult.DiscardUnknown(m)
}

var xxx_messageInfo_AsianHandicapResult proto.InternalMessageInfo

func (m *AsianHandicapResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AsianHandicapResult) GetHomeOdds() float64 {
	if m != nil {
		return m.HomeOdds
	}
	return 0
}

func (m *AsianHandicapResult) GetHandicap() string {
	if m != nil {
		return m.Handicap
	}
	return ""
}

func (m *AsianHandicapResult) GetAwayOdds() float64 {
	if m != nil {
		return m.AwayOdds
	}
	return 0
}

func (m *AsianHandicapResult) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *AsianHandicapResult) GetMinute() int64 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *AsianHandicapResult) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

type AsianHandicapTotal struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" bson:"-"`
	OverOdds             float64  `protobuf:"fixed64,2,opt,name=over_odds,json=overOdds,proto3" json:"over_od,string" bson:"home_odds"`
	Handicap             string   `protobuf:"bytes,3,opt,name=handicap,proto3" json:"handicap" bson:"handicap"`
	UnderOdds            float64  `protobuf:"fixed64,4,opt,name=under_odds,json=underOdds,proto3" json:"under_od,string" bson:"away_odds"`
	Score                string   `protobuf:"bytes,5,opt,name=score,proto3" json:"ss" bson:"score"`
	Minute               int64    `protobuf:"varint,6,opt,name=minute,proto3" json:"time_str,string" bson:"minute"`
	AddTime              int64    `protobuf:"varint,7,opt,name=add_time,json=addTime,proto3" json:"add_time,string" bson:"add_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AsianHandicapTotal) Reset()         { *m = AsianHandicapTotal{} }
func (m *AsianHandicapTotal) String() string { return proto.CompactTextString(m) }
func (*AsianHandicapTotal) ProtoMessage()    {}
func (*AsianHandicapTotal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{26}
}
func (m *AsianHandicapTotal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AsianHandicapTotal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AsianHandicapTotal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AsianHandicapTotal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsianHandicapTotal.Merge(m, src)
}
func (m *AsianHandicapTotal) XXX_Size() int {
	return m.Size()
}
func (m *AsianHandicapTotal) XXX_DiscardUnknown() {
	xxx_messageInfo_AsianHandicapTotal.DiscardUnknown(m)
}

var xxx_messageInfo_AsianHandicapTotal proto.InternalMessageInfo

func (m *AsianHandicapTotal) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AsianHandicapTotal) GetOverOdds() float64 {
	if m != nil {
		return m.OverOdds
	}
	return 0
}

func (m *AsianHandicapTotal) GetHandicap() string {
	if m != nil {
		return m.Handicap
	}
	return ""
}

func (m *AsianHandicapTotal) GetUnderOdds() float64 {
	if m != nil {
		return m.UnderOdds
	}
	return 0
}

func (m *AsianHandicapTotal) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

func (m *AsianHandicapTotal) GetMinute() int64 {
	if m != nil {
		return m.Minute
	}
	return 0
}

func (m *AsianHandicapTotal) GetAddTime() int64 {
	if m != nil {
		return m.AddTime
	}
	return 0
}

// ------------------ Stats trend ----------------- //
type StatsTrend struct {
	Attacks              *StatsTrendValue `protobuf:"bytes,1,opt,name=attacks,proto3" json:"attacks" bson:"attacks"`
	DangerousAttacks     *StatsTrendValue `protobuf:"bytes,2,opt,name=dangerous_attacks,json=dangerousAttacks,proto3" json:"dangerous_attacks" bson:"dangerous_attacks"`
	Possession           *StatsTrendValue `protobuf:"bytes,3,opt,name=possession,proto3" json:"possession" bson:"possession"`
	OffTarget            *StatsTrendValue `protobuf:"bytes,4,opt,name=off_target,json=offTarget,proto3" json:"off_target" bson:"off_target"`
	OnTarget             *StatsTrendValue `protobuf:"bytes,5,opt,name=on_target,json=onTarget,proto3" json:"on_target" bson:"on_target"`
	Corners              *StatsTrendValue `protobuf:"bytes,6,opt,name=corners,proto3" json:"corners" bson:"corners"`
	Goals                *StatsTrendValue `protobuf:"bytes,7,opt,name=goals,proto3" json:"goals" bson:"goals"`
	YellowCards          *StatsTrendValue `protobuf:"bytes,8,opt,name=yellow_cards,json=yellowCards,proto3" json:"yellowcards" bson:"yellow_cards"`
	RedCards             *StatsTrendValue `protobuf:"bytes,9,opt,name=red_cards,json=redCards,proto3" json:"redcards" bson:"redcards"`
	Substitutions        *StatsTrendValue `protobuf:"bytes,10,opt,name=substitutions,proto3" json:"substitutions" bson:"substitutions"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StatsTrend) Reset()         { *m = StatsTrend{} }
func (m *StatsTrend) String() string { return proto.CompactTextString(m) }
func (*StatsTrend) ProtoMessage()    {}
func (*StatsTrend) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{27}
}
func (m *StatsTrend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsTrend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsTrend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsTrend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsTrend.Merge(m, src)
}
func (m *StatsTrend) XXX_Size() int {
	return m.Size()
}
func (m *StatsTrend) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsTrend.DiscardUnknown(m)
}

var xxx_messageInfo_StatsTrend proto.InternalMessageInfo

func (m *StatsTrend) GetAttacks() *StatsTrendValue {
	if m != nil {
		return m.Attacks
	}
	return nil
}

func (m *StatsTrend) GetDangerousAttacks() *StatsTrendValue {
	if m != nil {
		return m.DangerousAttacks
	}
	return nil
}

func (m *StatsTrend) GetPossession() *StatsTrendValue {
	if m != nil {
		return m.Possession
	}
	return nil
}

func (m *StatsTrend) GetOffTarget() *StatsTrendValue {
	if m != nil {
		return m.OffTarget
	}
	return nil
}

func (m *StatsTrend) GetOnTarget() *StatsTrendValue {
	if m != nil {
		return m.OnTarget
	}
	return nil
}

func (m *StatsTrend) GetCorners() *StatsTrendValue {
	if m != nil {
		return m.Corners
	}
	return nil
}

func (m *StatsTrend) GetGoals() *StatsTrendValue {
	if m != nil {
		return m.Goals
	}
	return nil
}

func (m *StatsTrend) GetYellowCards() *StatsTrendValue {
	if m != nil {
		return m.YellowCards
	}
	return nil
}

func (m *StatsTrend) GetRedCards() *StatsTrendValue {
	if m != nil {
		return m.RedCards
	}
	return nil
}

func (m *StatsTrend) GetSubstitutions() *StatsTrendValue {
	if m != nil {
		return m.Substitutions
	}
	return nil
}

type StatsTrendValue struct {
	Home                 []*StatsTrendTick `protobuf:"bytes,1,rep,name=home,proto3" json:"home" bson:"home"`
	Away                 []*StatsTrendTick `protobuf:"bytes,2,rep,name=away,proto3" json:"away" bson:"away"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StatsTrendValue) Reset()         { *m = StatsTrendValue{} }
func (m *StatsTrendValue) String() string { return proto.CompactTextString(m) }
func (*StatsTrendValue) ProtoMessage()    {}
func (*StatsTrendValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{28}
}
func (m *StatsTrendValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsTrendValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsTrendValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsTrendValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsTrendValue.Merge(m, src)
}
func (m *StatsTrendValue) XXX_Size() int {
	return m.Size()
}
func (m *StatsTrendValue) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsTrendValue.DiscardUnknown(m)
}

var xxx_messageInfo_StatsTrendValue proto.InternalMessageInfo

func (m *StatsTrendValue) GetHome() []*StatsTrendTick {
	if m != nil {
		return m.Home
	}
	return nil
}

func (m *StatsTrendValue) GetAway() []*StatsTrendTick {
	if m != nil {
		return m.Away
	}
	return nil
}

type StatsTrendTick struct {
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time_str,string" bson:"time"`
	Value                int64    `protobuf:"varint,2,opt,name=value,proto3" json:"val,string" bson:"value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsTrendTick) Reset()         { *m = StatsTrendTick{} }
func (m *StatsTrendTick) String() string { return proto.CompactTextString(m) }
func (*StatsTrendTick) ProtoMessage()    {}
func (*StatsTrendTick) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{29}
}
func (m *StatsTrendTick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsTrendTick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsTrendTick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsTrendTick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsTrendTick.Merge(m, src)
}
func (m *StatsTrendTick) XXX_Size() int {
	return m.Size()
}
func (m *StatsTrendTick) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsTrendTick.DiscardUnknown(m)
}

var xxx_messageInfo_StatsTrendTick proto.InternalMessageInfo

func (m *StatsTrendTick) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *StatsTrendTick) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type FootballEvent struct {
	Event                *Event        `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	History              *EventHistory `protobuf:"bytes,2,opt,name=history,proto3" json:"history,omitempty"`
	Odds                 *Odds         `protobuf:"bytes,3,opt,name=odds,proto3" json:"odds,omitempty"`
	StatsTrend           *StatsTrend   `protobuf:"bytes,4,opt,name=stats_trend,json=statsTrend,proto3" json:"stats_trend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FootballEvent) Reset()         { *m = FootballEvent{} }
func (m *FootballEvent) String() string { return proto.CompactTextString(m) }
func (*FootballEvent) ProtoMessage()    {}
func (*FootballEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ba6bdaa59f24c59, []int{30}
}
func (m *FootballEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FootballEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FootballEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FootballEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FootballEvent.Merge(m, src)
}
func (m *FootballEvent) XXX_Size() int {
	return m.Size()
}
func (m *FootballEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FootballEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FootballEvent proto.InternalMessageInfo

func (m *FootballEvent) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *FootballEvent) GetHistory() *EventHistory {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *FootballEvent) GetOdds() *Odds {
	if m != nil {
		return m.Odds
	}
	return nil
}

func (m *FootballEvent) GetStatsTrend() *StatsTrend {
	if m != nil {
		return m.StatsTrend
	}
	return nil
}

func init() {
	proto.RegisterType((*InPlayEventsRequest)(nil), "InPlayEventsRequest")
	proto.RegisterType((*EventsResponse)(nil), "EventsResponse")
	proto.RegisterType((*UpcomingEventsRequest)(nil), "UpcomingEventsRequest")
	proto.RegisterType((*StartingEventsRequest)(nil), "StartingEventsRequest")
	proto.RegisterType((*EndedEventsRequest)(nil), "EndedEventsRequest")
	proto.RegisterType((*EventViewRequest)(nil), "EventViewRequest")
	proto.RegisterType((*EventOddsRequest)(nil), "EventOddsRequest")
	proto.RegisterType((*EventStatsTrendRequest)(nil), "EventStatsTrendRequest")
	proto.RegisterType((*LeaguesRequest)(nil), "LeaguesRequest")
	proto.RegisterType((*LeaguesResponse)(nil), "LeaguesResponse")
	proto.RegisterType((*TeamsRequest)(nil), "TeamsRequest")
	proto.RegisterType((*TeamsResponse)(nil), "TeamsResponse")
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*Team)(nil), "Team")
	proto.RegisterType((*League)(nil), "League")
	proto.RegisterType((*Timer)(nil), "Timer")
	proto.RegisterType((*ExtraInfo)(nil), "ExtraInfo")
	proto.RegisterType((*Manager)(nil), "Manager")
	proto.RegisterType((*Referee)(nil), "Referee")
	proto.RegisterType((*StadiumData)(nil), "StadiumData")
	proto.RegisterType((*EventViewEvent)(nil), "EventViewEvent")
	proto.RegisterType((*EventHistoryRequest)(nil), "EventHistoryRequest")
	proto.RegisterType((*EventHistory)(nil), "EventHistory")
	proto.RegisterType((*Odds)(nil), "Odds")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*AsianHandicapResult)(nil), "AsianHandicapResult")
	proto.RegisterType((*AsianHandicapTotal)(nil), "AsianHandicapTotal")
	proto.RegisterType((*StatsTrend)(nil), "StatsTrend")
	proto.RegisterType((*StatsTrendValue)(nil), "StatsTrendValue")
	proto.RegisterType((*StatsTrendTick)(nil), "StatsTrendTick")
	proto.RegisterType((*FootballEvent)(nil), "FootballEvent")
}

func init() {
	proto.RegisterFile("src/betsapi_scrapper/types/types.proto", fileDescriptor_4ba6bdaa59f24c59)
}

var fileDescriptor_4ba6bdaa59f24c59 = []byte{
	// 2647 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0xcd, 0x8f, 0x1b, 0xb7,
	0x15, 0xb7, 0x56, 0xab, 0xaf, 0xa7, 0xdd, 0xd5, 0x9a, 0xb6, 0xd7, 0xda, 0xf5, 0xc7, 0xd8, 0x6c,
	0x93, 0x38, 0x89, 0x3d, 0x8e, 0xd7, 0x89, 0x13, 0x24, 0x6e, 0x51, 0x8f, 0x9d, 0x38, 0x1b, 0x24,
	0xa9, 0x31, 0xde, 0x18, 0xfd, 0x40, 0xa0, 0x72, 0x35, 0x94, 0x34, 0xb0, 0x34, 0xa3, 0xcc, 0x50,
	0xb6, 0x17, 0x28, 0x7a, 0xeb, 0xad, 0xbd, 0xf7, 0xd6, 0x63, 0xd1, 0x1e, 0xda, 0xe6, 0x56, 0xf4,
	0x2f, 0xe8, 0xb1, 0x7f, 0xc1, 0xa0, 0x48, 0x80, 0xa2, 0xd0, 0x51, 0xe7, 0x1e, 0x0a, 0x3e, 0x72,
	0x86, 0x33, 0x2b, 0xc9, 0x71, 0x90, 0x22, 0xa8, 0xd1, 0x8b, 0x2d, 0xfe, 0xde, 0x7b, 0x3f, 0x92,
	0xef, 0x91, 0x8f, 0x8f, 0xc3, 0x85, 0x17, 0xe3, 0xa8, 0x7b, 0xf5, 0x80, 0x8b, 0x98, 0x8d, 0xfd,
	0x4e, 0xdc, 0x8d, 0xd8, 0x78, 0xcc, 0xa3, 0xab, 0xe2, 0x70, 0xcc, 0x63, 0xf5, 0xaf, 0x3d, 0x8e,
	0x42, 0x11, 0xee, 0x5c, 0xe9, 0xfb, 0x62, 0x30, 0x39, 0xb0, 0xbb, 0xe1, 0xe8, 0x6a, 0x3f, 0xec,
	0x87, 0x57, 0x11, 0x3e, 0x98, 0xf4, 0xb0, 0x85, 0x0d, 0xfc, 0xa5, 0xd4, 0xe9, 0x47, 0x70, 0x62,
	0x2f, 0xb8, 0x37, 0x64, 0x87, 0xef, 0x3e, 0xe2, 0x81, 0x88, 0x5d, 0xfe, 0xd9, 0x84, 0xc7, 0x82,
	0x6c, 0x43, 0x3d, 0x1e, 0x87, 0x91, 0xe8, 0xf8, 0x5e, 0xbb, 0x74, 0xa1, 0x74, 0xa9, 0xe1, 0xd6,
	0xb0, 0xbd, 0xe7, 0x91, 0x33, 0xd0, 0x18, 0x72, 0xd6, 0x9f, 0x70, 0x29, 0x5b, 0x41, 0x59, 0x5d,
	0x01, 0x7b, 0x1e, 0x7d, 0x0d, 0x36, 0x52, 0xa2, 0x78, 0x1c, 0x06, 0x31, 0x27, 0xe7, 0xa1, 0xca,
	0x11, 0x69, 0x97, 0x2e, 0x94, 0x2f, 0x35, 0x77, 0xab, 0x36, 0x2a, 0xb8, 0x1a, 0xa5, 0x9f, 0x97,
	0xe0, 0xd4, 0x27, 0xe3, 0x6e, 0x38, 0xf2, 0x83, 0xfe, 0x7f, 0x65, 0x0c, 0xe4, 0x34, 0xd4, 0x04,
	0x67, 0x23, 0x29, 0x2a, 0xa3, 0xa8, 0x2a, 0x9b, 0x7b, 0x1e, 0xb9, 0x08, 0x6b, 0xdd, 0x70, 0x12,
	0x88, 0xe8, 0xb0, 0xd3, 0x0d, 0x3d, 0xde, 0x5e, 0x45, 0x69, 0x53, 0x63, 0xb7, 0x43, 0x8f, 0x93,
	0x4d, 0x28, 0x7b, 0xec, 0xb0, 0x5d, 0x41, 0x89, 0xfc, 0x49, 0x08, 0xac, 0x8e, 0x59, 0x9f, 0xb7,
	0xab, 0x08, 0xe1, 0x6f, 0xfa, 0x29, 0x9c, 0xba, 0x2f, 0x58, 0x24, 0xbe, 0xce, 0x90, 0x5f, 0x86,
	0xcd, 0x91, 0x1f, 0x4c, 0x04, 0xef, 0x88, 0x41, 0xc4, 0xe3, 0x41, 0x38, 0x54, 0x23, 0x2f, 0xbb,
	0x2d, 0x85, 0xef, 0xa7, 0x30, 0xfd, 0x63, 0x09, 0xc8, 0xbb, 0x81, 0xc7, 0xbd, 0xe7, 0xc5, 0x1f,
	0x57, 0x60, 0x13, 0x87, 0xfa, 0xc0, 0xe7, 0x8f, 0x73, 0xa3, 0xc5, 0x08, 0xe7, 0x46, 0x8b, 0xed,
	0x3d, 0x8f, 0xfe, 0xb2, 0xa4, 0xf5, 0x7f, 0xe8, 0x79, 0xf1, 0x57, 0xeb, 0x93, 0x2d, 0xa8, 0xc6,
	0xe1, 0x24, 0xea, 0x72, 0x3d, 0x35, 0xdd, 0x22, 0xe7, 0x00, 0x62, 0x3f, 0xe8, 0xf2, 0x8e, 0xf0,
	0x47, 0x1c, 0xe7, 0x56, 0x76, 0x1b, 0x88, 0xec, 0xfb, 0x23, 0x4e, 0x2c, 0x68, 0x86, 0x9e, 0x17,
	0x77, 0x46, 0x2c, 0x7a, 0xc8, 0x85, 0x9e, 0x1d, 0x48, 0xe8, 0x23, 0x44, 0xe8, 0x75, 0xd8, 0xc2,
	0x61, 0xdc, 0x17, 0x4c, 0xc4, 0xfb, 0x11, 0x0f, 0xbc, 0x67, 0x18, 0xfc, 0x01, 0x6c, 0x7c, 0x88,
	0x9e, 0x7d, 0x96, 0xb8, 0x1c, 0xf5, 0xf0, 0xca, 0xbc, 0x87, 0x53, 0x7f, 0x96, 0x73, 0xfe, 0x7c,
	0x1d, 0x5a, 0x59, 0x1f, 0x7a, 0x1b, 0x5d, 0x84, 0x9a, 0x0a, 0x68, 0xba, 0x8f, 0x6a, 0xb6, 0x52,
	0x71, 0x53, 0x9c, 0x7e, 0x0f, 0xd6, 0xf6, 0x39, 0x1b, 0x3d, 0xcb, 0xb8, 0xd2, 0x4e, 0x57, 0x72,
	0x9d, 0x5e, 0x86, 0x75, 0x6d, 0xae, 0xbb, 0x3c, 0x03, 0x15, 0xb9, 0x50, 0xd2, 0x0e, 0x2b, 0xb6,
	0x14, 0xbb, 0x0a, 0xa3, 0xd3, 0x2a, 0x54, 0xd0, 0x79, 0xe4, 0x0a, 0xac, 0xa4, 0x1d, 0x38, 0xe7,
	0xa6, 0x89, 0xb5, 0xe2, 0x7b, 0xb3, 0xc4, 0x3a, 0x71, 0x10, 0x87, 0xc1, 0xdb, 0xd4, 0xf7, 0x2e,
	0x87, 0x23, 0x5f, 0xf0, 0xd1, 0x58, 0x1c, 0x52, 0x77, 0xc5, 0xf7, 0xc8, 0x4d, 0x58, 0xc5, 0x70,
	0xe1, 0xda, 0x77, 0x2e, 0x4d, 0x13, 0xab, 0x29, 0xdb, 0x97, 0x63, 0x11, 0xf9, 0x41, 0x7f, 0x96,
	0x58, 0xa7, 0x94, 0x25, 0x82, 0x39, 0x5b, 0xb4, 0x22, 0x77, 0x72, 0x73, 0x42, 0x8f, 0x39, 0x2f,
	0x4f, 0x13, 0x2b, 0xc3, 0x66, 0x89, 0xb5, 0xad, 0xcc, 0x53, 0x24, 0x4f, 0x91, 0x4d, 0xff, 0x1e,
	0x60, 0x9f, 0x9d, 0x58, 0x30, 0x31, 0x89, 0xd5, 0xca, 0x70, 0xae, 0xa6, 0x43, 0xd1, 0xf0, 0x2c,
	0xb1, 0xce, 0x9a, 0xa1, 0x68, 0x30, 0x4f, 0x07, 0x12, 0xbf, 0x8f, 0x30, 0xb9, 0x01, 0x95, 0xb8,
	0x1b, 0x46, 0x5c, 0xed, 0x14, 0xe7, 0x82, 0xf4, 0x43, 0x2c, 0x29, 0xb6, 0xf4, 0x70, 0xa4, 0x30,
	0x6f, 0xac, 0xd4, 0xc9, 0x07, 0xd0, 0x18, 0x84, 0x23, 0xde, 0x91, 0x4e, 0xc5, 0x2d, 0x95, 0xfa,
	0xd9, 0x79, 0x71, 0x9a, 0x58, 0xab, 0x52, 0x36, 0x4b, 0xac, 0x1d, 0x45, 0x92, 0x69, 0xe6, 0x89,
	0xea, 0x12, 0x95, 0x16, 0x92, 0x8b, 0x3d, 0x66, 0x87, 0x8a, 0xab, 0x36, 0xc7, 0x25, 0x65, 0x86,
	0x2b, 0xd3, 0x2c, 0x70, 0x49, 0x14, 0xb9, 0xde, 0x83, 0xaa, 0x5a, 0x56, 0xed, 0x3a, 0x12, 0xa5,
	0xab, 0xcd, 0x79, 0x61, 0x9a, 0x58, 0x5a, 0x34, 0x4b, 0xac, 0xd3, 0x8a, 0x4c, 0xb5, 0xf3, 0x4c,
	0x5a, 0x85, 0x5c, 0x87, 0x8a, 0xf4, 0x52, 0xd4, 0x6e, 0x20, 0x4d, 0xd5, 0x96, 0x3b, 0x33, 0x72,
	0x4e, 0x4d, 0x13, 0x4b, 0x09, 0x66, 0x89, 0x55, 0x57, 0x24, 0x57, 0xa8, 0xab, 0x20, 0xf2, 0x29,
	0x00, 0x7f, 0x22, 0x22, 0xd6, 0xf1, 0x83, 0x5e, 0xd8, 0x06, 0xb4, 0x04, 0xfb, 0x5d, 0x09, 0xed,
	0x05, 0xbd, 0xd0, 0xd9, 0x9d, 0x26, 0x56, 0x0b, 0x35, 0x4c, 0x97, 0xb3, 0xc4, 0x3a, 0xa3, 0x78,
	0x8c, 0x69, 0x7e, 0x40, 0x0d, 0x9e, 0x9a, 0x93, 0x1f, 0x65, 0x27, 0x52, 0x13, 0x17, 0x76, 0xcb,
	0xce, 0x92, 0x17, 0xfe, 0xc0, 0x95, 0xb0, 0xa9, 0x54, 0x0a, 0x1d, 0xe8, 0xd9, 0x1e, 0x95, 0xd0,
	0xf4, 0x2c, 0x23, 0x0f, 0x00, 0x06, 0x2c, 0xee, 0x0c, 0xfd, 0x80, 0x4f, 0xc6, 0xed, 0xb5, 0x0b,
	0xa5, 0x4b, 0x15, 0xe7, 0xcd, 0x69, 0x62, 0x9d, 0x34, 0xe8, 0xa2, 0x11, 0x2f, 0x92, 0x52, 0xb7,
	0x31, 0x60, 0xf1, 0x87, 0x88, 0xd2, 0xbf, 0x94, 0x60, 0x15, 0xc3, 0xf2, 0x35, 0xf7, 0xda, 0x1b,
	0xb0, 0x1a, 0x30, 0xbd, 0xd7, 0x1a, 0xce, 0x45, 0xb9, 0x0a, 0x64, 0xdb, 0x6c, 0x32, 0xd9, 0x2a,
	0x6c, 0x32, 0x09, 0x90, 0x0f, 0x8e, 0x64, 0x2d, 0xb5, 0xd1, 0x5e, 0x92, 0xfd, 0x75, 0xbb, 0xb3,
	0xc4, 0x3a, 0xa7, 0x8c, 0xf3, 0x3a, 0x79, 0x92, 0x7c, 0x7a, 0xa3, 0x7f, 0x2d, 0x41, 0x55, 0x2d,
	0x9d, 0xe7, 0x70, 0xf0, 0xff, 0x2e, 0x41, 0x05, 0x17, 0x2c, 0xb9, 0x06, 0x55, 0xd6, 0x15, 0xfe,
	0x23, 0x8e, 0xe3, 0x2f, 0x3b, 0xdb, 0xd3, 0xc4, 0x6a, 0x08, 0x61, 0xb2, 0x96, 0x59, 0xc4, 0x5a,
	0x91, 0xdc, 0x84, 0x9a, 0x3a, 0xd8, 0x63, 0x9d, 0xeb, 0xa8, 0x1c, 0x83, 0x18, 0xcd, 0x12, 0xab,
	0xad, 0x94, 0xb5, 0xb8, 0x90, 0xa2, 0x34, 0x26, 0xad, 0x63, 0xde, 0x0d, 0x03, 0x2f, 0x56, 0x07,
	0x9b, 0xb6, 0x8e, 0x8d, 0xb5, 0x16, 0x17, 0x13, 0x9c, 0xc2, 0xc8, 0x1d, 0x00, 0xe6, 0x79, 0xdc,
	0x53, 0x27, 0xe3, 0x2a, 0x12, 0xbc, 0x80, 0x04, 0xcc, 0x2c, 0x3b, 0xa3, 0x51, 0x58, 0x76, 0x08,
	0xcb, 0x59, 0xd3, 0x2f, 0x2b, 0xd0, 0xc8, 0x76, 0x1d, 0xf9, 0x18, 0xd6, 0x30, 0x01, 0x8d, 0x58,
	0xc0, 0xfa, 0x3c, 0x42, 0x47, 0x34, 0x77, 0xeb, 0xf6, 0x47, 0xaa, 0xed, 0x5c, 0x34, 0xce, 0xcd,
	0xeb, 0x15, 0x9c, 0x2b, 0x05, 0x5a, 0x5f, 0xf2, 0x61, 0x12, 0x4a, 0xf9, 0x56, 0x96, 0xf3, 0xe5,
	0xf5, 0x0a, 0x7c, 0x52, 0x90, 0xf2, 0xfd, 0x00, 0x6a, 0x11, 0xef, 0xf1, 0x88, 0xab, 0x98, 0x4b,
	0x2a, 0x57, 0xb5, 0x9d, 0xb3, 0xc6, 0x6b, 0x5a, 0xa5, 0xe0, 0x35, 0x8d, 0x11, 0x17, 0xd6, 0x62,
	0xc1, 0x3c, 0x7f, 0x32, 0xea, 0x78, 0x4c, 0x30, 0xf4, 0x5b, 0x73, 0x77, 0xcd, 0xbe, 0xaf, 0xc0,
	0x3b, 0x4c, 0xb0, 0xfc, 0xa8, 0xf2, 0xba, 0x85, 0x51, 0xc5, 0x46, 0x9f, 0xdc, 0x91, 0x89, 0x34,
	0xe8, 0x8b, 0x01, 0x9e, 0x0c, 0x65, 0xe7, 0xf2, 0x34, 0xb1, 0xd6, 0x15, 0x62, 0x16, 0x4f, 0x96,
	0x46, 0x11, 0x2e, 0xa6, 0x51, 0x09, 0x91, 0xd7, 0xa0, 0x32, 0xf6, 0x45, 0x77, 0xa0, 0xaa, 0x2e,
	0x67, 0xc7, 0x1c, 0x2c, 0x08, 0x17, 0x0e, 0x16, 0x44, 0xc8, 0x0d, 0xa8, 0x3d, 0xe6, 0x4c, 0x0c,
	0x78, 0x84, 0x47, 0x41, 0x23, 0xef, 0x03, 0x2d, 0x28, 0xf8, 0x40, 0x63, 0xd2, 0x4e, 0x0f, 0x1f,
	0x33, 0x7f, 0xc1, 0x4e, 0x0b, 0x8a, 0x2b, 0x4e, 0x61, 0xc4, 0x81, 0x75, 0x8c, 0xfa, 0x38, 0x8c,
	0x7d, 0xe1, 0x87, 0x01, 0x26, 0xfc, 0xb2, 0x73, 0xce, 0x9c, 0xc8, 0xa9, 0x38, 0x6f, 0x8e, 0x2b,
	0xea, 0x9e, 0x36, 0x91, 0x1c, 0x18, 0xe9, 0x8c, 0x03, 0x8e, 0x72, 0xa4, 0xe2, 0x02, 0x87, 0x04,
	0x33, 0x8e, 0xd7, 0xa0, 0x12, 0x85, 0x93, 0xc0, 0x6b, 0x37, 0x8f, 0x7a, 0x0a, 0xe1, 0x82, 0xa7,
	0x10, 0xa1, 0xbf, 0x2a, 0x41, 0x2d, 0x5d, 0x43, 0x69, 0xce, 0x29, 0x7d, 0xb3, 0x9c, 0xb3, 0xf2,
	0x0d, 0x72, 0x8e, 0x1c, 0x8e, 0x5e, 0xb7, 0xff, 0x0b, 0xc3, 0xf9, 0x5d, 0x19, 0x9a, 0xb9, 0xf5,
	0xff, 0x2d, 0x25, 0xf1, 0x37, 0x60, 0xb5, 0xeb, 0x8b, 0x43, 0x9d, 0xbc, 0xd1, 0x4c, 0xb6, 0x8d,
	0x99, 0x6c, 0x15, 0xcc, 0x24, 0x40, 0x6e, 0x41, 0x4d, 0x8f, 0x5d, 0xd7, 0x74, 0x72, 0xce, 0x29,
	0x64, 0xd6, 0xb1, 0x06, 0x0a, 0xeb, 0x58, 0x63, 0xe4, 0x01, 0xd4, 0xbb, 0x6c, 0xcc, 0xb0, 0x77,
	0xb5, 0x63, 0xdf, 0x9e, 0x26, 0xd6, 0x76, 0x8a, 0xe9, 0x3d, 0x5b, 0x38, 0xc5, 0xf5, 0xda, 0xcc,
	0x54, 0xf2, 0x05, 0x55, 0x0a, 0x92, 0x9f, 0xc1, 0x7a, 0x3f, 0x0c, 0xfb, 0x43, 0xde, 0xe9, 0x86,
	0x61, 0xe4, 0xc5, 0x7a, 0x27, 0xbf, 0x33, 0x4d, 0xac, 0x2d, 0x25, 0x50, 0x78, 0x81, 0x59, 0x07,
	0x6a, 0xb1, 0x9c, 0xba, 0x6b, 0x4a, 0x70, 0x1b, 0x05, 0xf4, 0xa1, 0xbe, 0x7a, 0x67, 0x75, 0x0c,
	0xa1, 0xb9, 0x58, 0x91, 0x2c, 0x56, 0xe6, 0xa4, 0xd2, 0x01, 0x12, 0xfc, 0x89, 0xc8, 0x07, 0x48,
	0xb6, 0x73, 0x75, 0x38, 0x7f, 0x22, 0x8a, 0x75, 0x38, 0x7f, 0x22, 0xa8, 0x03, 0x27, 0xb0, 0x8f,
	0xf7, 0xfd, 0x58, 0x84, 0xd1, 0xe1, 0x33, 0x5c, 0xe2, 0x36, 0xa1, 0xfc, 0x99, 0x38, 0xd4, 0x37,
	0x0e, 0xf9, 0x93, 0xfe, 0xbe, 0x04, 0x6b, 0x79, 0x12, 0x72, 0x15, 0xca, 0x83, 0xdd, 0x41, 0xf1,
	0x3b, 0x01, 0x96, 0x8a, 0x12, 0x9e, 0x25, 0x16, 0xe8, 0x44, 0xb2, 0x3b, 0xa0, 0xae, 0x84, 0xc8,
	0x75, 0xc0, 0x0a, 0xb9, 0xbd, 0x52, 0xb0, 0x38, 0x9d, 0xab, 0x9c, 0x9b, 0x26, 0xf7, 0x50, 0x17,
	0x41, 0x69, 0x24, 0x33, 0x46, 0xbb, 0x3c, 0x6f, 0xa4, 0x4b, 0xe4, 0xa6, 0x49, 0x36, 0xd4, 0x45,
	0x90, 0xfe, 0xab, 0x02, 0xab, 0xf2, 0xb6, 0x4a, 0x6e, 0x41, 0xa3, 0x37, 0x19, 0x0e, 0xd5, 0xc1,
	0x9a, 0xde, 0xc4, 0x5c, 0x1e, 0x4f, 0x86, 0xc2, 0x39, 0x23, 0x87, 0x7a, 0xad, 0x73, 0x6d, 0x96,
	0x58, 0x9b, 0x8a, 0x22, 0x53, 0xa5, 0x6e, 0x5d, 0xfe, 0xc6, 0x7b, 0xe9, 0xa7, 0xb0, 0xc1, 0x62,
	0x9f, 0x05, 0x9d, 0x01, 0x0b, 0x3c, 0xbf, 0xcb, 0xc6, 0x7a, 0xfc, 0x27, 0xed, 0x5b, 0x12, 0x7e,
	0x5f, 0xa3, 0x9a, 0xf4, 0x82, 0x22, 0xdd, 0x35, 0x11, 0x29, 0x1a, 0x53, 0x77, 0x9d, 0xe5, 0xcd,
	0x88, 0x03, 0x15, 0x11, 0x0a, 0x36, 0xd4, 0x13, 0x3c, 0x51, 0x64, 0xdd, 0x97, 0x22, 0x9c, 0x6d,
	0xf9, 0x5a, 0xe7, 0xfa, 0x2c, 0xb1, 0xd6, 0x74, 0x98, 0x25, 0x2e, 0x2b, 0x70, 0xf9, 0x3f, 0xf9,
	0x31, 0x28, 0xd2, 0x4e, 0x37, 0x8c, 0x02, 0x1e, 0xc9, 0x2b, 0xd2, 0x52, 0x2e, 0x4b, 0x71, 0xbd,
	0x3e, 0x4b, 0xac, 0x93, 0xf9, 0x01, 0x6a, 0x53, 0x99, 0xa0, 0x65, 0xfb, 0xb6, 0x6a, 0x92, 0x9f,
	0xc3, 0x76, 0xcf, 0x8f, 0x62, 0xd1, 0x19, 0xb0, 0x61, 0xaf, 0x73, 0xc4, 0x11, 0x95, 0xa7, 0x38,
	0xe2, 0x55, 0xd5, 0xcf, 0x1b, 0xb3, 0xc4, 0xba, 0xa0, 0xbd, 0xbb, 0x8c, 0x87, 0xba, 0x5b, 0x28,
	0x7b, 0x9f, 0x0d, 0x7b, 0x05, 0x2a, 0xc2, 0x60, 0x33, 0x67, 0xa5, 0xfc, 0x54, 0x5d, 0x3e, 0x37,
	0xaa, 0xfa, 0xbc, 0x61, 0xce, 0xe8, 0xa3, 0xd6, 0xd4, 0xdd, 0xc8, 0xba, 0x42, 0x1b, 0xf2, 0x04,
	0xda, 0x73, 0x03, 0x4b, 0xdd, 0x58, 0x5b, 0xde, 0xd5, 0x2b, 0xaa, 0xab, 0x37, 0x67, 0x89, 0x65,
	0x2d, 0x99, 0x5e, 0xe6, 0xd1, 0x53, 0xc5, 0xd9, 0xa5, 0xae, 0xbd, 0x03, 0x60, 0x6c, 0xda, 0xf5,
	0xe2, 0xe2, 0x3c, 0xab, 0xf8, 0xdf, 0x9a, 0x25, 0xd6, 0xf1, 0xa3, 0xfc, 0xd4, 0x6d, 0x64, 0x8c,
	0xf4, 0x0f, 0x65, 0xa8, 0x2a, 0x9b, 0x67, 0x4a, 0x20, 0xb7, 0xf5, 0x0d, 0x36, 0xf4, 0x3c, 0x55,
	0xe8, 0x96, 0xf0, 0xba, 0xb9, 0xa1, 0x41, 0x53, 0xe4, 0x6c, 0xe6, 0xca, 0x00, 0xa9, 0xac, 0xaf,
	0xae, 0xb8, 0xab, 0x6e, 0x43, 0xc3, 0x8b, 0xd8, 0x63, 0x45, 0x52, 0x36, 0x24, 0x1a, 0x9c, 0x23,
	0xc9, 0x94, 0xa9, 0x5b, 0x97, 0xbf, 0x53, 0x12, 0xac, 0x0f, 0x90, 0x64, 0xd5, 0x90, 0x68, 0x70,
	0x8e, 0x24, 0x53, 0xd6, 0x17, 0x5f, 0x24, 0xb9, 0x5c, 0xbc, 0xc8, 0x6f, 0x65, 0x17, 0xf9, 0xb5,
	0xdc, 0x45, 0x3e, 0xbb, 0xbe, 0xdf, 0x84, 0xaa, 0x2a, 0xd8, 0x31, 0x9d, 0x97, 0x9d, 0xef, 0xca,
	0x9b, 0xa9, 0xfe, 0x5c, 0x10, 0x99, 0x0e, 0xd7, 0xf3, 0xf5, 0x3e, 0x75, 0xb5, 0x0d, 0xb9, 0x05,
	0x75, 0xe6, 0xe9, 0x1a, 0xbd, 0x86, 0xf6, 0x72, 0xbc, 0xad, 0x14, 0x33, 0xf6, 0xad, 0xac, 0x60,
	0xd7, 0xc9, 0xa4, 0xc6, 0x3c, 0x55, 0xa2, 0xff, 0xa9, 0x0c, 0x27, 0x16, 0x6c, 0x96, 0x6f, 0x2f,
	0x72, 0xef, 0x40, 0x3d, 0xdb, 0xbd, 0xea, 0xb4, 0x96, 0xf9, 0x20, 0xc3, 0xcc, 0xe0, 0xcd, 0xde,
	0xcc, 0x84, 0xff, 0x97, 0x11, 0xfb, 0xbc, 0x0c, 0x64, 0x7e, 0xfb, 0x3f, 0x6b, 0xc0, 0xc2, 0x47,
	0x3c, 0x9a, 0x0b, 0x98, 0x06, 0x9f, 0x1a, 0x30, 0xa9, 0xf3, 0xcd, 0x03, 0xf6, 0x1e, 0xc0, 0x24,
	0xf0, 0xd2, 0x21, 0xa8, 0x88, 0xc9, 0x1a, 0xab, 0x95, 0xa2, 0x4f, 0x0b, 0x59, 0x03, 0x95, 0x9e,
	0xc7, 0x98, 0xfd, 0xb3, 0x0a, 0x60, 0x3e, 0x12, 0x93, 0x3d, 0xa8, 0x31, 0x21, 0x58, 0xf7, 0x61,
	0xac, 0x2f, 0xc1, 0x9b, 0xb6, 0x91, 0x3e, 0x60, 0xc3, 0x09, 0xc7, 0xd2, 0x38, 0x55, 0x9a, 0x25,
	0xd6, 0x86, 0xa6, 0x56, 0x80, 0x64, 0x56, 0xbf, 0xc8, 0x18, 0x8e, 0x7b, 0x2c, 0xe8, 0xf3, 0x28,
	0x9c, 0xc4, 0x9d, 0x94, 0x74, 0x65, 0x09, 0xe9, 0xb5, 0x69, 0x62, 0xcd, 0xab, 0x9b, 0xba, 0x76,
	0x4e, 0x44, 0xdd, 0xcd, 0x0c, 0xbb, 0xa5, 0x7b, 0xfc, 0x04, 0x60, 0x1c, 0xc6, 0x31, 0x8f, 0x63,
	0x79, 0xc3, 0x2a, 0x2f, 0xe9, 0xea, 0x3b, 0xd3, 0xc4, 0xca, 0xe9, 0x99, 0x43, 0xc3, 0x60, 0xd4,
	0xcd, 0x29, 0x90, 0x7d, 0x80, 0xb0, 0xd7, 0xeb, 0x08, 0x16, 0xf5, 0xf5, 0xb7, 0xf6, 0xa5, 0xb4,
	0x46, 0xcf, 0xd0, 0x1a, 0x8c, 0xba, 0x8d, 0xb0, 0xd7, 0xdb, 0xc7, 0xdf, 0xe4, 0x1e, 0x34, 0xc2,
	0x20, 0x25, 0xad, 0x2c, 0x21, 0x95, 0x45, 0xab, 0x51, 0x33, 0x4b, 0x2f, 0x83, 0xe4, 0xf2, 0x0f,
	0x34, 0xe3, 0x9e, 0xbc, 0x22, 0xa8, 0xc3, 0xb8, 0xfa, 0xb4, 0xd8, 0x69, 0x25, 0x13, 0xbb, 0xec,
	0xf0, 0x4d, 0x45, 0xe4, 0x16, 0x54, 0xfa, 0x21, 0x1b, 0xc6, 0xfa, 0x5b, 0xeb, 0x3c, 0xd1, 0xf6,
	0x34, 0xb1, 0x94, 0x8a, 0x59, 0xd9, 0xd8, 0xa4, 0xae, 0x82, 0xc9, 0x4f, 0x61, 0xed, 0x90, 0x0f,
	0x87, 0xe1, 0xe3, 0x4e, 0x97, 0xc9, 0x4b, 0x41, 0x7d, 0x09, 0x93, 0x5c, 0xb1, 0x4d, 0xa5, 0x89,
	0x8a, 0xe6, 0xca, 0x95, 0x37, 0xa7, 0xae, 0xd6, 0xb9, 0x2d, 0x5b, 0xe4, 0x63, 0x68, 0x44, 0xdc,
	0xd3, 0xcc, 0x8d, 0x25, 0xcc, 0xb8, 0xf9, 0x23, 0xee, 0xa5, 0xb4, 0xad, 0xf4, 0x33, 0x89, 0xa7,
	0x29, 0xa5, 0x50, 0xf1, 0x31, 0x58, 0x8f, 0x27, 0x07, 0xb1, 0xf0, 0xc5, 0x44, 0x5e, 0xb5, 0x63,
	0xfd, 0x65, 0x76, 0x9e, 0xf3, 0xe5, 0x69, 0x62, 0x15, 0x55, 0x4d, 0x6d, 0x58, 0x80, 0xa9, 0x5b,
	0x54, 0xa3, 0xbf, 0x2e, 0x41, 0xeb, 0x08, 0x1b, 0xb9, 0xa9, 0x8b, 0xfc, 0x92, 0xfe, 0x58, 0x6b,
	0xe4, 0xfb, 0x7e, 0xf7, 0xe1, 0x57, 0x55, 0xfb, 0x37, 0x75, 0xb5, 0xbf, 0xf2, 0x14, 0xeb, 0xe5,
	0x65, 0xff, 0x2f, 0x60, 0xa3, 0x68, 0x40, 0x6e, 0xe8, 0xe7, 0x8b, 0x52, 0xf6, 0x51, 0x6e, 0x41,
	0x26, 0x6a, 0x9a, 0x77, 0x83, 0xf4, 0xe1, 0xe2, 0x75, 0xa8, 0x3c, 0x92, 0xd3, 0xd1, 0xdf, 0x02,
	0xcf, 0xcb, 0x8d, 0xf0, 0x88, 0x0d, 0x8d, 0x8d, 0x5e, 0x1f, 0xa8, 0x44, 0x5d, 0xa5, 0x4c, 0x7f,
	0x5b, 0x82, 0xf5, 0xf7, 0xc2, 0x50, 0x1c, 0xb0, 0xe1, 0x50, 0xdd, 0xe9, 0xce, 0x42, 0x05, 0x6f,
	0x54, 0x3a, 0xf3, 0xa4, 0xaf, 0xa9, 0x0a, 0x24, 0x2f, 0x41, 0x6d, 0xa0, 0x2e, 0x53, 0x3a, 0x89,
	0xac, 0xdb, 0x85, 0x6b, 0x5a, 0x2a, 0x25, 0xdb, 0xb0, 0x9a, 0xd5, 0x5a, 0xcd, 0xdd, 0x8a, 0x8d,
	0x2f, 0x71, 0x08, 0x91, 0xcb, 0xd0, 0x8c, 0xe5, 0x9c, 0x3b, 0x42, 0x4e, 0x5a, 0x6f, 0xe5, 0x66,
	0xce, 0x71, 0x2e, 0xc4, 0xd9, 0xef, 0xdd, 0x3f, 0xaf, 0x42, 0xcd, 0x51, 0xaf, 0xd2, 0xe4, 0x6d,
	0x68, 0xdd, 0xe5, 0x22, 0xff, 0x9c, 0x4c, 0x4e, 0xda, 0x0b, 0x5e, 0x97, 0x77, 0xf4, 0x17, 0xf7,
	0xec, 0xa9, 0x89, 0x1e, 0x23, 0xdf, 0x87, 0xe3, 0x77, 0xb9, 0x28, 0x3e, 0x04, 0x93, 0x2d, 0x7b,
	0xe1, 0xcb, 0xf0, 0x72, 0xfb, 0xe2, 0xab, 0x2c, 0xd9, 0xb2, 0x17, 0x3e, 0xd3, 0x2e, 0xb2, 0x7f,
	0x0b, 0x36, 0xee, 0x72, 0x91, 0x7b, 0x75, 0x25, 0x27, 0xec, 0xf9, 0x37, 0xd8, 0x45, 0x96, 0xaf,
	0xc2, 0x9a, 0xb4, 0x4c, 0xaf, 0xde, 0xe4, 0xb8, 0x7d, 0xf4, 0x2d, 0x74, 0x47, 0x47, 0x09, 0xbb,
	0x69, 0xa5, 0xca, 0xe9, 0xad, 0xf7, 0xa4, 0xbd, 0xe0, 0x26, 0xbd, 0x53, 0x0c, 0x1c, 0x3d, 0x46,
	0x5e, 0x31, 0xdd, 0xe0, 0x11, 0xaa, 0xbb, 0xc9, 0x3d, 0xa1, 0xee, 0xa8, 0x30, 0xd2, 0x63, 0xe4,
	0x26, 0x90, 0x54, 0x37, 0x77, 0x6c, 0x9d, 0xb6, 0x17, 0xbf, 0x76, 0xee, 0xe4, 0x83, 0x4b, 0x8f,
	0x91, 0x6b, 0x00, 0x77, 0xb9, 0xd0, 0x0f, 0x90, 0xa4, 0x65, 0x17, 0x9f, 0x3b, 0x77, 0x36, 0xed,
	0x23, 0x6f, 0x93, 0xe8, 0x83, 0xfa, 0x5d, 0x2e, 0xf0, 0xf9, 0x90, 0xac, 0xdb, 0xf9, 0x57, 0xc8,
	0x9d, 0x0d, 0xbb, 0xf0, 0xaa, 0x48, 0x8f, 0x39, 0xdb, 0x7f, 0xfb, 0xe2, 0x7c, 0xe9, 0xef, 0x5f,
	0x9c, 0x2f, 0xfd, 0xe3, 0x8b, 0xf3, 0xa5, 0xdf, 0x7c, 0x79, 0xfe, 0xd8, 0x4f, 0x6a, 0xf6, 0x3b,
	0xf8, 0x27, 0x0c, 0x07, 0x55, 0xfc, 0xa3, 0x84, 0xeb, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x1f,
	0x68, 0x84, 0x71, 0xed, 0x20, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BetsapiClient is the client API for Betsapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BetsapiClient interface {
	GetInPlayEvents(ctx context.Context, in *InPlayEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetUpcomingEvents(ctx context.Context, in *UpcomingEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetStartingEvents(ctx context.Context, in *StartingEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetEndedEvents(ctx context.Context, in *EndedEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error)
	GetEventView(ctx context.Context, in *EventViewRequest, opts ...grpc.CallOption) (*Event, error)
	GetEventHistory(ctx context.Context, in *EventHistoryRequest, opts ...grpc.CallOption) (*EventHistory, error)
	GetEventOdds(ctx context.Context, in *EventOddsRequest, opts ...grpc.CallOption) (*Odds, error)
	GetEventStatsTrend(ctx context.Context, in *EventStatsTrendRequest, opts ...grpc.CallOption) (*StatsTrend, error)
	GetLeagues(ctx context.Context, in *LeaguesRequest, opts ...grpc.CallOption) (*LeaguesResponse, error)
	GetTeams(ctx context.Context, in *TeamsRequest, opts ...grpc.CallOption) (*TeamsResponse, error)
}

type betsapiClient struct {
	cc *grpc.ClientConn
}

func NewBetsapiClient(cc *grpc.ClientConn) BetsapiClient {
	return &betsapiClient{cc}
}

func (c *betsapiClient) GetInPlayEvents(ctx context.Context, in *InPlayEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/Betsapi/GetInPlayEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsapiClient) GetUpcomingEvents(ctx context.Context, in *UpcomingEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/Betsapi/GetUpcomingEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsapiClient) GetStartingEvents(ctx context.Context, in *StartingEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/Betsapi/GetStartingEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsapiClient) GetEndedEvents(ctx context.Context, in *EndedEventsRequest, opts ...grpc.CallOption) (*EventsResponse, error) {
	out := new(EventsResponse)
	err := c.cc.Invoke(ctx, "/Betsapi/GetEndedEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsapiClient) GetEventView(ctx context.Context, in *EventViewRequest, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/Betsapi/GetEventView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsapiClient) GetEventHistory(ctx context.Context, in *EventHistoryRequest, opts ...grpc.CallOption) (*EventHistory, error) {
	out := new(EventHistory)
	err := c.cc.Invoke(ctx, "/Betsapi/GetEventHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsapiClient) GetEventOdds(ctx context.Context, in *EventOddsRequest, opts ...grpc.CallOption) (*Odds, error) {
	out := new(Odds)
	err := c.cc.Invoke(ctx, "/Betsapi/GetEventOdds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsapiClient) GetEventStatsTrend(ctx context.Context, in *EventStatsTrendRequest, opts ...grpc.CallOption) (*StatsTrend, error) {
	out := new(StatsTrend)
	err := c.cc.Invoke(ctx, "/Betsapi/GetEventStatsTrend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsapiClient) GetLeagues(ctx context.Context, in *LeaguesRequest, opts ...grpc.CallOption) (*LeaguesResponse, error) {
	out := new(LeaguesResponse)
	err := c.cc.Invoke(ctx, "/Betsapi/GetLeagues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsapiClient) GetTeams(ctx context.Context, in *TeamsRequest, opts ...grpc.CallOption) (*TeamsResponse, error) {
	out := new(TeamsResponse)
	err := c.cc.Invoke(ctx, "/Betsapi/GetTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BetsapiServer is the server API for Betsapi service.
type BetsapiServer interface {
	GetInPlayEvents(context.Context, *InPlayEventsRequest) (*EventsResponse, error)
	GetUpcomingEvents(context.Context, *UpcomingEventsRequest) (*EventsResponse, error)
	GetStartingEvents(context.Context, *StartingEventsRequest) (*EventsResponse, error)
	GetEndedEvents(context.Context, *EndedEventsRequest) (*EventsResponse, error)
	GetEventView(context.Context, *EventViewRequest) (*Event, error)
	GetEventHistory(context.Context, *EventHistoryRequest) (*EventHistory, error)
	GetEventOdds(context.Context, *EventOddsRequest) (*Odds, error)
	GetEventStatsTrend(context.Context, *EventStatsTrendRequest) (*StatsTrend, error)
	GetLeagues(context.Context, *LeaguesRequest) (*LeaguesResponse, error)
	GetTeams(context.Context, *TeamsRequest) (*TeamsResponse, error)
}

// UnimplementedBetsapiServer can be embedded to have forward compatible implementations.
type UnimplementedBetsapiServer struct {
}

func (*UnimplementedBetsapiServer) GetInPlayEvents(ctx context.Context, req *InPlayEventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInPlayEvents not implemented")
}
func (*UnimplementedBetsapiServer) GetUpcomingEvents(ctx context.Context, req *UpcomingEventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUpcomingEvents not implemented")
}
func (*UnimplementedBetsapiServer) GetStartingEvents(ctx context.Context, req *StartingEventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStartingEvents not implemented")
}
func (*UnimplementedBetsapiServer) GetEndedEvents(ctx context.Context, req *EndedEventsRequest) (*EventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEndedEvents not implemented")
}
func (*UnimplementedBetsapiServer) GetEventView(ctx context.Context, req *EventViewRequest) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventView not implemented")
}
func (*UnimplementedBetsapiServer) GetEventHistory(ctx context.Context, req *EventHistoryRequest) (*EventHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventHistory not implemented")
}
func (*UnimplementedBetsapiServer) GetEventOdds(ctx context.Context, req *EventOddsRequest) (*Odds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventOdds not implemented")
}
func (*UnimplementedBetsapiServer) GetEventStatsTrend(ctx context.Context, req *EventStatsTrendRequest) (*StatsTrend, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventStatsTrend not implemented")
}
func (*UnimplementedBetsapiServer) GetLeagues(ctx context.Context, req *LeaguesRequest) (*LeaguesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeagues not implemented")
}
func (*UnimplementedBetsapiServer) GetTeams(ctx context.Context, req *TeamsRequest) (*TeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}

func RegisterBetsapiServer(s *grpc.Server, srv BetsapiServer) {
	s.RegisterService(&_Betsapi_serviceDesc, srv)
}

func _Betsapi_GetInPlayEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InPlayEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsapiServer).GetInPlayEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Betsapi/GetInPlayEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsapiServer).GetInPlayEvents(ctx, req.(*InPlayEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Betsapi_GetUpcomingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpcomingEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsapiServer).GetUpcomingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Betsapi/GetUpcomingEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsapiServer).GetUpcomingEvents(ctx, req.(*UpcomingEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Betsapi_GetStartingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartingEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsapiServer).GetStartingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Betsapi/GetStartingEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsapiServer).GetStartingEvents(ctx, req.(*StartingEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Betsapi_GetEndedEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndedEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsapiServer).GetEndedEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Betsapi/GetEndedEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsapiServer).GetEndedEvents(ctx, req.(*EndedEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Betsapi_GetEventView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsapiServer).GetEventView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Betsapi/GetEventView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsapiServer).GetEventView(ctx, req.(*EventViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Betsapi_GetEventHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsapiServer).GetEventHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Betsapi/GetEventHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsapiServer).GetEventHistory(ctx, req.(*EventHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Betsapi_GetEventOdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventOddsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsapiServer).GetEventOdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Betsapi/GetEventOdds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsapiServer).GetEventOdds(ctx, req.(*EventOddsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Betsapi_GetEventStatsTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventStatsTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsapiServer).GetEventStatsTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Betsapi/GetEventStatsTrend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsapiServer).GetEventStatsTrend(ctx, req.(*EventStatsTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Betsapi_GetLeagues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaguesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsapiServer).GetLeagues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Betsapi/GetLeagues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsapiServer).GetLeagues(ctx, req.(*LeaguesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Betsapi_GetTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsapiServer).GetTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Betsapi/GetTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsapiServer).GetTeams(ctx, req.(*TeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Betsapi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Betsapi",
	HandlerType: (*BetsapiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInPlayEvents",
			Handler:    _Betsapi_GetInPlayEvents_Handler,
		},
		{
			MethodName: "GetUpcomingEvents",
			Handler:    _Betsapi_GetUpcomingEvents_Handler,
		},
		{
			MethodName: "GetStartingEvents",
			Handler:    _Betsapi_GetStartingEvents_Handler,
		},
		{
			MethodName: "GetEndedEvents",
			Handler:    _Betsapi_GetEndedEvents_Handler,
		},
		{
			MethodName: "GetEventView",
			Handler:    _Betsapi_GetEventView_Handler,
		},
		{
			MethodName: "GetEventHistory",
			Handler:    _Betsapi_GetEventHistory_Handler,
		},
		{
			MethodName: "GetEventOdds",
			Handler:    _Betsapi_GetEventOdds_Handler,
		},
		{
			MethodName: "GetEventStatsTrend",
			Handler:    _Betsapi_GetEventStatsTrend_Handler,
		},
		{
			MethodName: "GetLeagues",
			Handler:    _Betsapi_GetLeagues_Handler,
		},
		{
			MethodName: "GetTeams",
			Handler:    _Betsapi_GetTeams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/betsapi_scrapper/types/types.proto",
}

func (m *InPlayEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InPlayEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InPlayEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LeagueId) > 0 {
		i -= len(m.LeagueId)
		copy(dAtA[i:], m.LeagueId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LeagueId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SportId) > 0 {
		i -= len(m.SportId)
		copy(dAtA[i:], m.SportId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SportId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpcomingEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpcomingEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpcomingEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Page) > 0 {
		i -= len(m.Page)
		copy(dAtA[i:], m.Page)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Page)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Day) > 0 {
		i -= len(m.Day)
		copy(dAtA[i:], m.Day)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Day)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TeamId) > 0 {
		i -= len(m.TeamId)
		copy(dAtA[i:], m.TeamId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TeamId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LeagueId) > 0 {
		i -= len(m.LeagueId)
		copy(dAtA[i:], m.LeagueId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LeagueId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SportId) > 0 {
		i -= len(m.SportId)
		copy(dAtA[i:], m.SportId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SportId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartingEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartingEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StartingEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MinuteThreshold != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinuteThreshold))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SportId) > 0 {
		i -= len(m.SportId)
		copy(dAtA[i:], m.SportId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SportId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndedEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndedEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndedEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Page) > 0 {
		i -= len(m.Page)
		copy(dAtA[i:], m.Page)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Page)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Day) > 0 {
		i -= len(m.Day)
		copy(dAtA[i:], m.Day)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Day)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TeamId) > 0 {
		i -= len(m.TeamId)
		copy(dAtA[i:], m.TeamId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TeamId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LeagueId) > 0 {
		i -= len(m.LeagueId)
		copy(dAtA[i:], m.LeagueId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LeagueId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SportId) > 0 {
		i -= len(m.SportId)
		copy(dAtA[i:], m.SportId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SportId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventViewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventViewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventViewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOddsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOddsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOddsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OddsMarket) > 0 {
		i -= len(m.OddsMarket)
		copy(dAtA[i:], m.OddsMarket)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OddsMarket)))
		i--
		dAtA[i] = 0x22
	}
	if m.SinceTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.SinceTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventStatsTrendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventStatsTrendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventStatsTrendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeaguesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaguesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaguesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Page) > 0 {
		i -= len(m.Page)
		copy(dAtA[i:], m.Page)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Page)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SportId) > 0 {
		i -= len(m.SportId)
		copy(dAtA[i:], m.SportId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SportId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeaguesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaguesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaguesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Leagues) > 0 {
		for iNdEx := len(m.Leagues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Leagues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Page) > 0 {
		i -= len(m.Page)
		copy(dAtA[i:], m.Page)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Page)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SportId) > 0 {
		i -= len(m.SportId)
		copy(dAtA[i:], m.SportId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SportId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Teams) > 0 {
		for iNdEx := len(m.Teams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.HasLineup != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HasLineup))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ExtraInfo != nil {
		{
			size, err := m.ExtraInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Timer != nil {
		{
			size, err := m.Timer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.League != nil {
		{
			size, err := m.League.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.AwayTeam != nil {
		{
			size, err := m.AwayTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.HomeTeam != nil {
		{
			size, err := m.HomeTeam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TimeStatus) > 0 {
		i -= len(m.TimeStatus)
		copy(dAtA[i:], m.TimeStatus)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TimeStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SportId) > 0 {
		i -= len(m.SportId)
		copy(dAtA[i:], m.SportId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.SportId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Time != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *League) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *League) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *League) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Timer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AddedTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AddedTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Seconds != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Seconds))
		i--
		dAtA[i] = 0x18
	}
	if m.Minutes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Minutes))
		i--
		dAtA[i] = 0x10
	}
	if m.Active != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Active))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExtraInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtraInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtraInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Round) > 0 {
		i -= len(m.Round)
		copy(dAtA[i:], m.Round)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Round)))
		i--
		dAtA[i] = 0x5a
	}
	if m.AwayPosition != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AwayPosition))
		i--
		dAtA[i] = 0x50
	}
	if m.HomePosition != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HomePosition))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Stadium) > 0 {
		i -= len(m.Stadium)
		copy(dAtA[i:], m.Stadium)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Stadium)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Weather) > 0 {
		i -= len(m.Weather)
		copy(dAtA[i:], m.Weather)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Weather)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Pitch) > 0 {
		i -= len(m.Pitch)
		copy(dAtA[i:], m.Pitch)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Pitch)))
		i--
		dAtA[i] = 0x32
	}
	if m.Length != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x28
	}
	if m.StadiumData != nil {
		{
			size, err := m.StadiumData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Referee != nil {
		{
			size, err := m.Referee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AwayManager != nil {
		{
			size, err := m.AwayManager.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HomeManager != nil {
		{
			size, err := m.HomeManager.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Manager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Manager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Manager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Referee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Referee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Referee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StadiumData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StadiumData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StadiumData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GoogleCoords) > 0 {
		i -= len(m.GoogleCoords)
		copy(dAtA[i:], m.GoogleCoords)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.GoogleCoords)))
		i--
		dAtA[i] = 0x32
	}
	if m.Capacity != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventViewEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventViewEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventViewEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Qty) > 0 {
		i -= len(m.Qty)
		copy(dAtA[i:], m.Qty)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Qty)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Away) > 0 {
		for iNdEx := len(m.Away) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Away[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Home) > 0 {
		for iNdEx := len(m.Home) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Home[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.H2H) > 0 {
		for iNdEx := len(m.H2H) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.H2H[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Odds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Odds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Odds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FirstHalf) > 0 {
		for iNdEx := len(m.FirstHalf) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirstHalf[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.FirstHalfAsianCorners) > 0 {
		for iNdEx := len(m.FirstHalfAsianCorners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirstHalfAsianCorners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.FirstHalfTotal) > 0 {
		for iNdEx := len(m.FirstHalfTotal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirstHalfTotal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FirstHalfAsianHandicap) > 0 {
		for iNdEx := len(m.FirstHalfAsianHandicap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FirstHalfAsianHandicap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AsianCorners) > 0 {
		for iNdEx := len(m.AsianCorners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AsianCorners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Total) > 0 {
		for iNdEx := len(m.Total) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Total[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AsianHandicap) > 0 {
		for iNdEx := len(m.AsianHandicap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AsianHandicap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FullTime) > 0 {
		for iNdEx := len(m.FullTime) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FullTime[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AddTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AddTime))
		i--
		dAtA[i] = 0x38
	}
	if m.Minute != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Minute))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AwayOdds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AwayOdds))))
		i--
		dAtA[i] = 0x21
	}
	if m.DrawOdds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DrawOdds))))
		i--
		dAtA[i] = 0x19
	}
	if m.HomeOdds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.HomeOdds))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AsianHandicapResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AsianHandicapResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AsianHandicapResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AddTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AddTime))
		i--
		dAtA[i] = 0x38
	}
	if m.Minute != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Minute))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x2a
	}
	if m.AwayOdds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AwayOdds))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.Handicap) > 0 {
		i -= len(m.Handicap)
		copy(dAtA[i:], m.Handicap)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Handicap)))
		i--
		dAtA[i] = 0x1a
	}
	if m.HomeOdds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.HomeOdds))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AsianHandicapTotal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AsianHandicapTotal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AsianHandicapTotal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AddTime != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AddTime))
		i--
		dAtA[i] = 0x38
	}
	if m.Minute != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Minute))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UnderOdds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.UnderOdds))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.Handicap) > 0 {
		i -= len(m.Handicap)
		copy(dAtA[i:], m.Handicap)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Handicap)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OverOdds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OverOdds))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatsTrend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsTrend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsTrend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Substitutions != nil {
		{
			size, err := m.Substitutions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RedCards != nil {
		{
			size, err := m.RedCards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.YellowCards != nil {
		{
			size, err := m.YellowCards.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Goals != nil {
		{
			size, err := m.Goals.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Corners != nil {
		{
			size, err := m.Corners.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OnTarget != nil {
		{
			size, err := m.OnTarget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OffTarget != nil {
		{
			size, err := m.OffTarget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Possession != nil {
		{
			size, err := m.Possession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DangerousAttacks != nil {
		{
			size, err := m.DangerousAttacks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Attacks != nil {
		{
			size, err := m.Attacks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatsTrendValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsTrendValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsTrendValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Away) > 0 {
		for iNdEx := len(m.Away) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Away[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Home) > 0 {
		for iNdEx := len(m.Home) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Home[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StatsTrendTick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsTrendTick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatsTrendTick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FootballEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FootballEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FootballEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StatsTrend != nil {
		{
			size, err := m.StatsTrend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Odds != nil {
		{
			size, err := m.Odds.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.History != nil {
		{
			size, err := m.History.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InPlayEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SportId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LeagueId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpcomingEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SportId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LeagueId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TeamId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Day)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Page)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartingEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SportId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MinuteThreshold != 0 {
		n += 1 + sovTypes(uint64(m.MinuteThreshold))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EndedEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SportId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.LeagueId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TeamId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Day)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Page)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventViewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventOddsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.SinceTime != 0 {
		n += 1 + sovTypes(uint64(m.SinceTime))
	}
	l = len(m.OddsMarket)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventStatsTrendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaguesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SportId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Page)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaguesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Leagues) > 0 {
		for _, e := range m.Leagues {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SportId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Page)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TeamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Teams) > 0 {
		for _, e := range m.Teams {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovTypes(uint64(m.Time))
	}
	l = len(m.SportId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.TimeStatus)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HomeTeam != nil {
		l = m.HomeTeam.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AwayTeam != nil {
		l = m.AwayTeam.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.League != nil {
		l = m.League.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Timer != nil {
		l = m.Timer.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ExtraInfo != nil {
		l = m.ExtraInfo.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.HasLineup != 0 {
		n += 1 + sovTypes(uint64(m.HasLineup))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *League) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Timer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active != 0 {
		n += 1 + sovTypes(uint64(m.Active))
	}
	if m.Minutes != 0 {
		n += 1 + sovTypes(uint64(m.Minutes))
	}
	if m.Seconds != 0 {
		n += 1 + sovTypes(uint64(m.Seconds))
	}
	if m.AddedTime != 0 {
		n += 1 + sovTypes(uint64(m.AddedTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtraInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomeManager != nil {
		l = m.HomeManager.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AwayManager != nil {
		l = m.AwayManager.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Referee != nil {
		l = m.Referee.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StadiumData != nil {
		l = m.StadiumData.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Length != 0 {
		n += 1 + sovTypes(uint64(m.Length))
	}
	l = len(m.Pitch)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Weather)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Stadium)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HomePosition != 0 {
		n += 1 + sovTypes(uint64(m.HomePosition))
	}
	if m.AwayPosition != 0 {
		n += 1 + sovTypes(uint64(m.AwayPosition))
	}
	l = len(m.Round)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Manager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Referee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StadiumData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Capacity != 0 {
		n += 1 + sovTypes(uint64(m.Capacity))
	}
	l = len(m.GoogleCoords)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventViewEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Qty)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.H2H) > 0 {
		for _, e := range m.H2H {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Home) > 0 {
		for _, e := range m.Home {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Away) > 0 {
		for _, e := range m.Away {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Odds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FullTime) > 0 {
		for _, e := range m.FullTime {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AsianHandicap) > 0 {
		for _, e := range m.AsianHandicap {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.AsianCorners) > 0 {
		for _, e := range m.AsianCorners {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.FirstHalfAsianHandicap) > 0 {
		for _, e := range m.FirstHalfAsianHandicap {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.FirstHalfTotal) > 0 {
		for _, e := range m.FirstHalfTotal {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.FirstHalfAsianCorners) > 0 {
		for _, e := range m.FirstHalfAsianCorners {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.FirstHalf) > 0 {
		for _, e := range m.FirstHalf {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HomeOdds != 0 {
		n += 9
	}
	if m.DrawOdds != 0 {
		n += 9
	}
	if m.AwayOdds != 0 {
		n += 9
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Minute != 0 {
		n += 1 + sovTypes(uint64(m.Minute))
	}
	if m.AddTime != 0 {
		n += 1 + sovTypes(uint64(m.AddTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AsianHandicapResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HomeOdds != 0 {
		n += 9
	}
	l = len(m.Handicap)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.AwayOdds != 0 {
		n += 9
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Minute != 0 {
		n += 1 + sovTypes(uint64(m.Minute))
	}
	if m.AddTime != 0 {
		n += 1 + sovTypes(uint64(m.AddTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AsianHandicapTotal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OverOdds != 0 {
		n += 9
	}
	l = len(m.Handicap)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.UnderOdds != 0 {
		n += 9
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Minute != 0 {
		n += 1 + sovTypes(uint64(m.Minute))
	}
	if m.AddTime != 0 {
		n += 1 + sovTypes(uint64(m.AddTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatsTrend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attacks != nil {
		l = m.Attacks.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.DangerousAttacks != nil {
		l = m.DangerousAttacks.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Possession != nil {
		l = m.Possession.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OffTarget != nil {
		l = m.OffTarget.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.OnTarget != nil {
		l = m.OnTarget.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Corners != nil {
		l = m.Corners.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Goals != nil {
		l = m.Goals.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.YellowCards != nil {
		l = m.YellowCards.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.RedCards != nil {
		l = m.RedCards.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Substitutions != nil {
		l = m.Substitutions.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatsTrendValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Home) > 0 {
		for _, e := range m.Home {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if len(m.Away) > 0 {
		for _, e := range m.Away {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatsTrendTick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTypes(uint64(m.Time))
	}
	if m.Value != 0 {
		n += 1 + sovTypes(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FootballEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.History != nil {
		l = m.History.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Odds != nil {
		l = m.Odds.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.StatsTrend != nil {
		l = m.StatsTrend.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InPlayEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InPlayEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InPlayEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeagueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeagueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpcomingEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpcomingEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpcomingEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeagueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeagueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Day = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Page = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartingEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartingEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartingEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinuteThreshold", wireType)
			}
			m.MinuteThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinuteThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndedEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndedEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndedEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeagueId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeagueId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Day = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Page = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventViewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventViewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventViewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOddsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOddsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOddsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinceTime", wireType)
			}
			m.SinceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SinceTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OddsMarket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OddsMarket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventStatsTrendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventStatsTrendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventStatsTrendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaguesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaguesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaguesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Page = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaguesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaguesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaguesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leagues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leagues = append(m.Leagues, &League{})
			if err := m.Leagues[len(m.Leagues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Page = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teams = append(m.Teams, &Team{})
			if err := m.Teams[len(m.Teams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HomeTeam == nil {
				m.HomeTeam = &Team{}
			}
			if err := m.HomeTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayTeam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwayTeam == nil {
				m.AwayTeam = &Team{}
			}
			if err := m.AwayTeam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field League", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.League == nil {
				m.League = &League{}
			}
			if err := m.League.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timer == nil {
				m.Timer = &Timer{}
			}
			if err := m.Timer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfo == nil {
				m.ExtraInfo = &ExtraInfo{}
			}
			if err := m.ExtraInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &EventViewEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLineup", wireType)
			}
			m.HasLineup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasLineup |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *League) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: League: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: League: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Timer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			m.Active = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Active |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minutes", wireType)
			}
			m.Minutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minutes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedTime", wireType)
			}
			m.AddedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtraInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtraInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtraInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HomeManager == nil {
				m.HomeManager = &Manager{}
			}
			if err := m.HomeManager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwayManager == nil {
				m.AwayManager = &Manager{}
			}
			if err := m.AwayManager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Referee == nil {
				m.Referee = &Referee{}
			}
			if err := m.Referee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StadiumData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StadiumData == nil {
				m.StadiumData = &StadiumData{}
			}
			if err := m.StadiumData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pitch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pitch = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weather", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weather = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stadium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stadium = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomePosition", wireType)
			}
			m.HomePosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomePosition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayPosition", wireType)
			}
			m.AwayPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayPosition |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Manager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Manager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Manager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Referee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Referee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Referee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StadiumData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StadiumData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StadiumData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleCoords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoogleCoords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventViewEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventViewEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventViewEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field H2H", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.H2H = append(m.H2H, &Event{})
			if err := m.H2H[len(m.H2H)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Home", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Home = append(m.Home, &Event{})
			if err := m.Home[len(m.Home)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Away", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Away = append(m.Away, &Event{})
			if err := m.Away[len(m.Away)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Odds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Odds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Odds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullTime = append(m.FullTime, &Result{})
			if err := m.FullTime[len(m.FullTime)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsianHandicap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsianHandicap = append(m.AsianHandicap, &AsianHandicapResult{})
			if err := m.AsianHandicap[len(m.AsianHandicap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total, &AsianHandicapTotal{})
			if err := m.Total[len(m.Total)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsianCorners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AsianCorners = append(m.AsianCorners, &AsianHandicapTotal{})
			if err := m.AsianCorners[len(m.AsianCorners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstHalfAsianHandicap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstHalfAsianHandicap = append(m.FirstHalfAsianHandicap, &AsianHandicapResult{})
			if err := m.FirstHalfAsianHandicap[len(m.FirstHalfAsianHandicap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstHalfTotal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstHalfTotal = append(m.FirstHalfTotal, &AsianHandicapTotal{})
			if err := m.FirstHalfTotal[len(m.FirstHalfTotal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstHalfAsianCorners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstHalfAsianCorners = append(m.FirstHalfAsianCorners, &AsianHandicapTotal{})
			if err := m.FirstHalfAsianCorners[len(m.FirstHalfAsianCorners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstHalf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstHalf = append(m.FirstHalf, &Result{})
			if err := m.FirstHalf[len(m.FirstHalf)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeOdds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.HomeOdds = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrawOdds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DrawOdds = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayOdds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AwayOdds = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minute", wireType)
			}
			m.Minute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTime", wireType)
			}
			m.AddTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AsianHandicapResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AsianHandicapResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AsianHandicapResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeOdds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.HomeOdds = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handicap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handicap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayOdds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AwayOdds = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minute", wireType)
			}
			m.Minute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTime", wireType)
			}
			m.AddTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AsianHandicapTotal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AsianHandicapTotal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AsianHandicapTotal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverOdds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OverOdds = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handicap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handicap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderOdds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.UnderOdds = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minute", wireType)
			}
			m.Minute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Minute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddTime", wireType)
			}
			m.AddTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsTrend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsTrend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsTrend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attacks == nil {
				m.Attacks = &StatsTrendValue{}
			}
			if err := m.Attacks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DangerousAttacks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DangerousAttacks == nil {
				m.DangerousAttacks = &StatsTrendValue{}
			}
			if err := m.DangerousAttacks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Possession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Possession == nil {
				m.Possession = &StatsTrendValue{}
			}
			if err := m.Possession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffTarget == nil {
				m.OffTarget = &StatsTrendValue{}
			}
			if err := m.OffTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OnTarget == nil {
				m.OnTarget = &StatsTrendValue{}
			}
			if err := m.OnTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Corners == nil {
				m.Corners = &StatsTrendValue{}
			}
			if err := m.Corners.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goals == nil {
				m.Goals = &StatsTrendValue{}
			}
			if err := m.Goals.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YellowCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.YellowCards == nil {
				m.YellowCards = &StatsTrendValue{}
			}
			if err := m.YellowCards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedCards == nil {
				m.RedCards = &StatsTrendValue{}
			}
			if err := m.RedCards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Substitutions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Substitutions == nil {
				m.Substitutions = &StatsTrendValue{}
			}
			if err := m.Substitutions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsTrendValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsTrendValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsTrendValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Home", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Home = append(m.Home, &StatsTrendTick{})
			if err := m.Home[len(m.Home)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Away", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Away = append(m.Away, &StatsTrendTick{})
			if err := m.Away[len(m.Away)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsTrendTick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsTrendTick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsTrendTick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FootballEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FootballEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FootballEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.History == nil {
				m.History = &EventHistory{}
			}
			if err := m.History.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Odds == nil {
				m.Odds = &Odds{}
			}
			if err := m.Odds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatsTrend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatsTrend == nil {
				m.StatsTrend = &StatsTrend{}
			}
			if err := m.StatsTrend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
